// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2024, WSO2 LLC. (http://www.wso2.com).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/http;

# The powerful, yet simple, Dropbox API allows you to manage and control content and team settings programmatically and extend Dropbox capabilities in new and powerful ways. This is a collection that includes requests to all endpoints in the Dropbox API. 
# 
# The Dropbox API is divided in two groups of endpoints: User Endpoints and Business Endpoints. Operations that would most likely be executed by a user, such as file operations, are in the User Endpoints folder. Operations that would most likely be executed by a team administrator, such as adding users to groups, live in the Business Endpoints folder. 
# 
# If you are new to Dropbox Business and Team Administration, please have a look at the [Dropobox Admin Guide](https://help.dropbox.com/guide/admin/how-to-get-started#dropbox-admin-guide). 
# 
# If you want more information on how to use our API please refer to our [Developer Portal](https://www.dropbox.com/developers). 
# 
# # What's in the collection?
# 
# The endpoints are organized in the following folders:
# * account
# * auth
# * check
# * contacts
# * file_properties
# * file_requests
# * files
# * sharing
# * team
# * team_log
# * users
# 
# # Authorization
# 
# ## OAuth 2.0 for API Access
# Dropbox uses OAuth 2.0, an open specification, to authorize access to data. To get an OAuth token from Dropbox to enable Postman to access your Dropbox account via the API you’ll need to create a new app on the DBX Platform.
# 
# ## Creating an App on the DBX Platform
# Navigate to https://www.dropbox.com/developers/apps and select “Create app” 
# 1. Choose an API  
# 2. Choose the type of access you need 
# 3. Give your app a name  
# 4. Choose the Dropbox account that will own your app  
# 
# For reference, please use the [Dropbox OAuth guide](https://www.dropbox.com/lp/developers/reference/oauth-guide) 
# 
# ## Generating an Access Token
# Once you select “Create app” a page will load that displays information about your newly created app. To generate an access token scroll down to “OAuth 2” and click “Generate” beneath “Generated access token.” The token will display as a long string of characters. Copy this token for use with the Postman Collection.
# 
# ## Adding an Access Token to the requests
# In the Postman client, click on the three dots to the right of the collection name to "View more actions."
# 
# ![Screenshot of adding access token](https://www.dropbox.com/s/sfebu9ai76cbq39/Screen%20Shot%202020-10-28%20at%2012.50.56%20AM.png?raw=1)
# 
# Then, click "Edit."
# 
# Click on the "Variables" tab and, in the row for the `access_token` variable, paste your access token in the `CURRENT VALUE` column. The default value is `your-access-token-here`.
# 
# ![Screenshot of adding access token](https://www.dropbox.com/s/ahnbxwe6oscjues/Screen%20Shot%202020-10-28%20at%2012.51.13%20AM.png?raw=1)
# 
# For information on sessions and variables in Postman see the blog post at https://blog.postman.com/sessions-faq/.
# 
# # Notes
# * Dropbox also has a Postman Collection in the API Network to help administrators with team management workflows. It is called [Dropbox Team Admin Workflows](). 
public isolated client class Client {
    final http:Client clientEp;
    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string serviceUrl = "https://api.dropboxapi.com/2") returns error? {
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, timeout: config.timeout, forwarded: config.forwarded, poolConfig: config.poolConfig, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, validation: config.validation};
        do {
            if config.http1Settings is ClientHttp1Settings {
                ClientHttp1Settings settings = check config.http1Settings.ensureType(ClientHttp1Settings);
                httpClientConfig.http1Settings = {...settings};
            }
            if config.http2Settings is http:ClientHttp2Settings {
                httpClientConfig.http2Settings = check config.http2Settings.ensureType(http:ClientHttp2Settings);
            }
            if config.cache is http:CacheConfig {
                httpClientConfig.cache = check config.cache.ensureType(http:CacheConfig);
            }
            if config.responseLimits is http:ResponseLimitConfigs {
                httpClientConfig.responseLimits = check config.responseLimits.ensureType(http:ResponseLimitConfigs);
            }
            if config.secureSocket is http:ClientSecureSocket {
                httpClientConfig.secureSocket = check config.secureSocket.ensureType(http:ClientSecureSocket);
            }
            if config.proxy is http:ProxyConfig {
                httpClientConfig.proxy = check config.proxy.ensureType(http:ProxyConfig);
            }
        }
        http:Client httpEp = check new (serviceUrl, httpClientConfig);
        self.clientEp = httpEp;
        return;
    }

    resource isolated function post 'check/app(EchoArg payload, AppHeaders headers = {}) returns EchoResult|error {
        string resourcePath = string `/check/app`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post 'check/user(EchoArg payload, UserHeaders headers = {}) returns EchoResult|error {
        string resourcePath = string `/check/user`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # set_profile_photo
    #
    # + headers - Headers to be sent with the request 
    # + return - set_profile_photo response 
    resource isolated function post account/set_profile_photo(SetProfilePhotoArg payload, SetProfilePhotoHeaders headers = {}) returns SetProfilePhotoResult|error {
        string resourcePath = string `/account/set_profile_photo`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # token/from_oauth1
    #
    # + headers - Headers to be sent with the request 
    # + return - token/from_oauth1 response 
    resource isolated function post auth/token/from_oauth1(TokenFromOauth1Arg payload, TokenFromOauth1Headers headers = {}) returns TokenFromOauth1Result|error {
        string resourcePath = string `/auth/token/from_oauth1`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # token/revoke
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post auth/token/revoke(TokenRevokeHeaders headers = {}) returns error? {
        string resourcePath = string `/auth/token/revoke`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # delete_manual_contacts
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post contacts/delete_manual_contacts(DeleteManualContactsHeaders headers = {}) returns error? {
        string resourcePath = string `/contacts/delete_manual_contacts`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # delete_manual_contacts_batch
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post contacts/delete_manual_contacts_batch(DeleteManualContactsArg payload, DeleteManualContactsBatchHeaders headers = {}) returns error? {
        string resourcePath = string `/contacts/delete_manual_contacts_batch`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # properties/add
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post file_properties/properties/add(AddPropertiesArg payload, PropertiesAddHeaders headers = {}) returns error? {
        string resourcePath = string `/file_properties/properties/add`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # properties/overwrite
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post file_properties/properties/overwrite(OverwritePropertyGroupArg payload, PropertiesOverwriteHeaders headers = {}) returns error? {
        string resourcePath = string `/file_properties/properties/overwrite`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # properties/remove
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post file_properties/properties/remove(RemovePropertiesArg payload, PropertiesRemoveHeaders headers = {}) returns error? {
        string resourcePath = string `/file_properties/properties/remove`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # properties/search
    #
    # + headers - Headers to be sent with the request 
    # + return - properties/search response 
    resource isolated function post file_properties/properties/search(PropertiesSearchArg payload, PropertiesSearchHeaders headers = {}) returns PropertiesSearchResult|error {
        string resourcePath = string `/file_properties/properties/search`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post file_properties/properties/search/'continue(PropertiesSearchContinueArg payload, PropertiesSearchContinueHeaders headers = {}) returns PropertiesSearchResult|error {
        string resourcePath = string `/file_properties/properties/search/continue`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # properties/update
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post file_properties/properties/update(UpdatePropertiesArg payload, PropertiesUpdateHeaders headers = {}) returns error? {
        string resourcePath = string `/file_properties/properties/update`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # templates/add_for_team
    #
    # + headers - Headers to be sent with the request 
    # + return - templates/add_for_team response 
    resource isolated function post file_properties/templates/add_for_team(AddTemplateArg payload, map<string|string[]> headers = {}) returns AddTemplateResult|error {
        string resourcePath = string `/file_properties/templates/add_for_team`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # templates/add_for_user
    #
    # + headers - Headers to be sent with the request 
    # + return - templates/add_for_user response 
    resource isolated function post file_properties/templates/add_for_user(AddTemplateArg payload, TemplatesAddForUserHeaders headers = {}) returns AddTemplateResult|error {
        string resourcePath = string `/file_properties/templates/add_for_user`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # templates/get_for_team
    #
    # + headers - Headers to be sent with the request 
    # + return - templates/get_for_team response 
    resource isolated function post file_properties/templates/get_for_team(GetTemplateArg payload, map<string|string[]> headers = {}) returns GetTemplateResult|error {
        string resourcePath = string `/file_properties/templates/get_for_team`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # templates/get_for_user
    #
    # + headers - Headers to be sent with the request 
    # + return - templates/get_for_user response 
    resource isolated function post file_properties/templates/get_for_user(GetTemplateArg payload, TemplatesGetForUserHeaders headers = {}) returns GetTemplateResult|error {
        string resourcePath = string `/file_properties/templates/get_for_user`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # templates/list_for_team
    #
    # + headers - Headers to be sent with the request 
    # + return - templates/list_for_team response 
    resource isolated function post file_properties/templates/list_for_team(map<string|string[]> headers = {}) returns ListTemplateResult|error {
        string resourcePath = string `/file_properties/templates/list_for_team`;
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # templates/list_for_user
    #
    # + headers - Headers to be sent with the request 
    # + return - templates/list_for_user response 
    resource isolated function post file_properties/templates/list_for_user(TemplatesListForUserHeaders headers = {}) returns ListTemplateResult|error {
        string resourcePath = string `/file_properties/templates/list_for_user`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # templates/remove_for_team
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post file_properties/templates/remove_for_team(RemoveTemplateArg payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/file_properties/templates/remove_for_team`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # templates/remove_for_user
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post file_properties/templates/remove_for_user(TemplateId payload, TemplatesRemoveForUserHeaders headers = {}) returns error? {
        string resourcePath = string `/file_properties/templates/remove_for_user`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # templates/update_for_team
    #
    # + headers - Headers to be sent with the request 
    # + return - templates/update_for_team response 
    resource isolated function post file_properties/templates/update_for_team(UpdateTemplateArg payload, map<string|string[]> headers = {}) returns TemplateId|error {
        string resourcePath = string `/file_properties/templates/update_for_team`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # templates/update_for_user
    #
    # + headers - Headers to be sent with the request 
    # + return - templates/update_for_user response 
    resource isolated function post file_properties/templates/update_for_user(UpdateTemplateArg payload, TemplatesUpdateForUserHeaders headers = {}) returns TemplateId|error {
        string resourcePath = string `/file_properties/templates/update_for_user`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # count
    #
    # + headers - Headers to be sent with the request 
    # + return - count response 
    resource isolated function post file_requests/count(CountHeaders headers = {}) returns CountFileRequestsResult|error {
        string resourcePath = string `/file_requests/count`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # create
    #
    # + headers - Headers to be sent with the request 
    # + return - create response 
    resource isolated function post file_requests/create(CreateFileRequestArgs payload, CreateHeaders headers = {}) returns FileRequest|error {
        string resourcePath = string `/file_requests/create`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # delete
    #
    # + headers - Headers to be sent with the request 
    # + return - delete response 
    resource isolated function post file_requests/delete(DeleteFileRequestArgs payload, DeleteHeaders headers = {}) returns DeleteFileRequestsResult|error {
        string resourcePath = string `/file_requests/delete`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # delete_all_closed
    #
    # + headers - Headers to be sent with the request 
    # + return - delete_all_closed response 
    resource isolated function post file_requests/delete_all_closed(DeleteAllClosedHeaders headers = {}) returns DeleteFileRequestsResult|error {
        string resourcePath = string `/file_requests/delete_all_closed`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # get
    #
    # + headers - Headers to be sent with the request 
    # + return - get response 
    resource isolated function post file_requests/get(GetFileRequestArgs payload, GetHeaders headers = {}) returns FileRequest|error {
        string resourcePath = string `/file_requests/get`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post file_requests/list/'continue(ListFileRequestsContinueArg payload, ListContinueHeaders headers = {}) returns ListFileRequestsV2Result|error {
        string resourcePath = string `/file_requests/list/continue`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # list
    #
    # + headers - Headers to be sent with the request 
    # + return - list response 
    resource isolated function post file_requests/list_v2(ListFileRequestsArg payload, ListHeaders headers = {}) returns ListFileRequestsV2Result|error {
        string resourcePath = string `/file_requests/list_v2`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # update
    #
    # + headers - Headers to be sent with the request 
    # + return - update response 
    resource isolated function post file_requests/update(UpdateFileRequestArgs payload, UpdateHeaders headers = {}) returns FileRequest|error {
        string resourcePath = string `/file_requests/update`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # copy_batch/check
    #
    # + headers - Headers to be sent with the request 
    # + return - copy_batch/check response 
    resource isolated function post files/copy_batch/check_v2(PollArg payload, CopyBatchCheckHeaders headers = {}) returns RelocationBatchV2Result|error {
        string resourcePath = string `/files/copy_batch/check_v2`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # copy_batch
    #
    # + headers - Headers to be sent with the request 
    # + return - copy_batch response 
    resource isolated function post files/copy_batch_v2(RelocationBatchArgBase payload, CopyBatchHeaders headers = {}) returns RelocationBatchV2Result|error {
        string resourcePath = string `/files/copy_batch_v2`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # copy_reference/get
    #
    # + headers - Headers to be sent with the request 
    # + return - copy_reference/get response 
    resource isolated function post files/copy_reference/get(GetCopyReferenceArg payload, CopyReferenceGetHeaders headers = {}) returns GetCopyReferenceResult|error {
        string resourcePath = string `/files/copy_reference/get`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # copy_reference/save
    #
    # + headers - Headers to be sent with the request 
    # + return - copy_reference/save response 
    resource isolated function post files/copy_reference/save(SaveCopyReferenceArg payload, CopyReferenceSaveHeaders headers = {}) returns MetadataResult|error {
        string resourcePath = string `/files/copy_reference/save`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # copy
    #
    # + headers - Headers to be sent with the request 
    # + return - copy response 
    resource isolated function post files/copy_v2(RelocationArg payload, CopyHeaders headers = {}) returns MetadataResult|error {
        string resourcePath = string `/files/copy_v2`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # create_folder_batch
    #
    # + headers - Headers to be sent with the request 
    # + return - create_folder_batch response 
    resource isolated function post files/create_folder_batch(CreateFolderBatchArg payload, CreateFolderBatchHeaders headers = {}) returns CreateFolderBatchResult|error {
        string resourcePath = string `/files/create_folder_batch`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post files/create_folder_batch/'check(PollArg payload, CreateFolderBatchCheckHeaders headers = {}) returns CreateFolderBatchResult|error {
        string resourcePath = string `/files/create_folder_batch/check`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # create_folder
    #
    # + headers - Headers to be sent with the request 
    # + return - create_folder response 
    resource isolated function post files/create_folder_v2(CreateFolderArg payload, CreateFolderHeaders headers = {}) returns FolderMetadataResponse|error {
        string resourcePath = string `/files/create_folder_v2`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # delete_batch
    #
    # + headers - Headers to be sent with the request 
    # + return - delete_batch response 
    resource isolated function post files/delete_batch(DeleteBatchArg payload, DeleteBatchHeaders headers = {}) returns DeleteBatchResult|error {
        string resourcePath = string `/files/delete_batch`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post files/delete_batch/'check(PollArg payload, DeleteBatchCheckHeaders headers = {}) returns DeleteBatchResult|error {
        string resourcePath = string `/files/delete_batch/check`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # delete
    #
    # + headers - Headers to be sent with the request 
    # + return - delete response 
    resource isolated function post files/delete_v2(DeleteArg payload, Delete1Headers headers = {}) returns MetadataResult|error {
        string resourcePath = string `/files/delete_v2`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # download
    #
    # + headers - Headers to be sent with the request 
    # + return - download response 
    resource isolated function post files/download(DownloadHeaders headers = {}) returns FileMetadata|error {
        string resourcePath = string `/files/download`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # download_zip
    #
    # + headers - Headers to be sent with the request 
    # + return - download_zip response 
    resource isolated function post files/download_zip(DownloadZipHeaders headers = {}) returns FolderMetadataResponse|error {
        string resourcePath = string `/files/download_zip`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # export
    #
    # + headers - Headers to be sent with the request 
    # + return - export response 
    resource isolated function post files/export(ExportHeaders headers = {}) returns ExportResult|error {
        string resourcePath = string `/files/export`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # get_file_lock_batch
    #
    # + headers - Headers to be sent with the request 
    # + return - get_file_lock_batch response 
    resource isolated function post files/get_file_lock_batch(LockFileBatchArg payload, GetFileLockBatchHeaders headers = {}) returns LockFileBatchResult|error {
        string resourcePath = string `/files/get_file_lock_batch`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # get_metadata
    #
    # + headers - Headers to be sent with the request 
    # + return - get_metadata response 
    resource isolated function post files/get_metadata(GetMetadataArg payload, GetMetadataHeaders headers = {}) returns Metadata|error {
        string resourcePath = string `/files/get_metadata`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # get_preview
    #
    # + headers - Headers to be sent with the request 
    # + return - get_preview response 
    resource isolated function post files/get_preview(GetPreviewHeaders headers = {}) returns FileMetadata|error {
        string resourcePath = string `/files/get_preview`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # get_temporary_link
    #
    # + headers - Headers to be sent with the request 
    # + return - get_temporary_link response 
    resource isolated function post files/get_temporary_link(GetTemporaryLinkArg payload, GetTemporaryLinkHeaders headers = {}) returns GetTemporaryLinkResult|error {
        string resourcePath = string `/files/get_temporary_link`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # get_temporary_upload_link
    #
    # + headers - Headers to be sent with the request 
    # + return - get_temporary_upload_link response 
    resource isolated function post files/get_temporary_upload_link(GetTemporaryUploadLinkArg payload, GetTemporaryUploadLinkHeaders headers = {}) returns GetTemporaryUploadLinkResult|error {
        string resourcePath = string `/files/get_temporary_upload_link`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # get_thumbnail_batch
    #
    # + headers - Headers to be sent with the request 
    # + return - get_thumbnail_batch response 
    resource isolated function post files/get_thumbnail_batch(GetThumbnailBatchArg payload, GetThumbnailBatchHeaders headers = {}) returns GetThumbnailBatchResult|error {
        string resourcePath = string `/files/get_thumbnail_batch`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # get_thumbnail
    #
    # + headers - Headers to be sent with the request 
    # + return - get_thumbnail response 
    resource isolated function post files/get_thumbnail_v2(GetThumbnailHeaders headers = {}) returns PreviewResult|error {
        string resourcePath = string `/files/get_thumbnail_v2`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # list_folder
    #
    # + headers - Headers to be sent with the request 
    # + return - list_folder response 
    resource isolated function post files/list_folder(ListFolderArg payload, ListFolderHeaders headers = {}) returns ListFolderResult|error {
        string resourcePath = string `/files/list_folder`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post files/list_folder/'continue(ListFolderContinueArg payload, ListFolderContinueHeaders headers = {}) returns ListFolderResult|error {
        string resourcePath = string `/files/list_folder/continue`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # list_folder/get_latest_cursor
    #
    # + headers - Headers to be sent with the request 
    # + return - list_folder/get_latest_cursor response 
    resource isolated function post files/list_folder/get_latest_cursor(ListFolderArg payload, ListFolderGetLatestCursorHeaders headers = {}) returns ListFolderContinueArg|error {
        string resourcePath = string `/files/list_folder/get_latest_cursor`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # list_folder/longpoll
    #
    # + headers - Headers to be sent with the request 
    # + return - list_folder/longpoll response 
    resource isolated function post files/list_folder/longpoll(ListFolderLongpollArg payload, ListFolderLongpollHeaders headers = {}) returns ListFolderLongpollResult|error {
        string resourcePath = string `/files/list_folder/longpoll`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # list_revisions
    #
    # + headers - Headers to be sent with the request 
    # + return - list_revisions response 
    resource isolated function post files/list_revisions(ListRevisionsArg payload, ListRevisionsHeaders headers = {}) returns ListRevisionsResult|error {
        string resourcePath = string `/files/list_revisions`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # lock_file_batch
    #
    # + headers - Headers to be sent with the request 
    # + return - lock_file_batch response 
    resource isolated function post files/lock_file_batch(LockFileBatchArg payload, LockFileBatchHeaders headers = {}) returns LockFileBatchResult|error {
        string resourcePath = string `/files/lock_file_batch`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # move_batch/check
    #
    # + headers - Headers to be sent with the request 
    # + return - move_batch/check response 
    resource isolated function post files/move_batch/check_v2(PollArg payload, MoveBatchCheckHeaders headers = {}) returns RelocationBatchV2Result|error {
        string resourcePath = string `/files/move_batch/check_v2`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # move_batch
    #
    # + headers - Headers to be sent with the request 
    # + return - move_batch response 
    resource isolated function post files/move_batch_v2(MoveBatchArg payload, MoveBatchHeaders headers = {}) returns RelocationBatchV2Result|error {
        string resourcePath = string `/files/move_batch_v2`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # move
    #
    # + headers - Headers to be sent with the request 
    # + return - move response 
    resource isolated function post files/move_v2(RelocationArg payload, MoveHeaders headers = {}) returns MetadataResult|error {
        string resourcePath = string `/files/move_v2`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # permanently_delete
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post files/permanently_delete(DeleteArg payload, PermanentlyDeleteHeaders headers = {}) returns error? {
        string resourcePath = string `/files/permanently_delete`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # restore
    #
    # + headers - Headers to be sent with the request 
    # + return - restore response 
    resource isolated function post files/restore(RestoreArg payload, RestoreHeaders headers = {}) returns FileMetadata|error {
        string resourcePath = string `/files/restore`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # save_url
    #
    # + headers - Headers to be sent with the request 
    # + return - save_url response 
    resource isolated function post files/save_url(SaveUrlArg payload, SaveUrlHeaders headers = {}) returns SaveUrlResult|error {
        string resourcePath = string `/files/save_url`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # save_url/check_job_status
    #
    # + headers - Headers to be sent with the request 
    # + return - save_url/check_job_status response 
    resource isolated function post files/save_url/check_job_status(PollArg payload, SaveUrlCheckJobStatusHeaders headers = {}) returns CheckJobStatusResponse|error {
        string resourcePath = string `/files/save_url/check_job_status`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # search/continue
    #
    # + headers - Headers to be sent with the request 
    # + return - search/continue response 
    resource isolated function post files/search/continue_v2(SearchV2ContinueArg payload, SearchContinueHeaders headers = {}) returns SearchV2Result|error {
        string resourcePath = string `/files/search/continue_v2`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # search
    #
    # + headers - Headers to be sent with the request 
    # + return - search response 
    resource isolated function post files/search_v2(SearchV2Arg payload, SearchHeaders headers = {}) returns SearchV2Result|error {
        string resourcePath = string `/files/search_v2`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # unlock_file_batch
    #
    # + headers - Headers to be sent with the request 
    # + return - unlock_file_batch response 
    resource isolated function post files/unlock_file_batch(UnlockFileBatchArg payload, UnlockFileBatchHeaders headers = {}) returns LockFileBatchResult|error {
        string resourcePath = string `/files/unlock_file_batch`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # upload
    #
    # + headers - Headers to be sent with the request 
    # + return - upload response 
    resource isolated function post files/upload(UploadHeaders headers = {}) returns FileMetadata|error {
        string resourcePath = string `/files/upload`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post files/upload_session/'start(UploadSessionStartHeaders headers = {}) returns UploadSessionStartResult|error {
        string resourcePath = string `/files/upload_session/start`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # upload_session/append
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post files/upload_session/append_v2(UploadSessionAppendHeaders headers = {}) returns error? {
        string resourcePath = string `/files/upload_session/append_v2`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # upload_session/finish
    #
    # + headers - Headers to be sent with the request 
    # + return - upload_session/finish response 
    resource isolated function post files/upload_session/finish(UploadSessionFinishHeaders headers = {}) returns FileMetadata|error {
        string resourcePath = string `/files/upload_session/finish`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # upload_session/finish_batch
    #
    # + headers - Headers to be sent with the request 
    # + return - upload_session/finish_batch response 
    resource isolated function post files/upload_session/finish_batch(UploadSessionFinishBatchArg payload, UploadSessionFinishBatchHeaders headers = {}) returns UploadSessionFinishBatchResult|error {
        string resourcePath = string `/files/upload_session/finish_batch`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post files/upload_session/finish_batch/'check(PollArg payload, UploadSessionFinishBatchCheckHeaders headers = {}) returns UploadSessionFinishBatchResult|error {
        string resourcePath = string `/files/upload_session/finish_batch/check`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # add_file_member
    #
    # + headers - Headers to be sent with the request 
    # + return - add_file_member response 
    resource isolated function post sharing/add_file_member(AddFileMemberArgs payload, AddFileMemberHeaders headers = {}) returns FileMemberActionResult[]|error {
        string resourcePath = string `/sharing/add_file_member`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # add_folder_member
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post sharing/add_folder_member(AddFolderMemberArg payload, AddFolderMemberHeaders headers = {}) returns error? {
        string resourcePath = string `/sharing/add_folder_member`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # check_job_status
    #
    # + headers - Headers to be sent with the request 
    # + return - check_job_status response 
    resource isolated function post sharing/check_job_status(PollArg payload, CheckJobStatusHeaders headers = {}) returns CheckJobStatusResponse|error {
        string resourcePath = string `/sharing/check_job_status`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # check_remove_member_job_status
    #
    # + headers - Headers to be sent with the request 
    # + return - check_remove_member_job_status response 
    resource isolated function post sharing/check_remove_member_job_status(PollArg payload, CheckRemoveMemberJobStatusHeaders headers = {}) returns GenericResponseWithTag|error {
        string resourcePath = string `/sharing/check_remove_member_job_status`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # check_share_job_status
    #
    # + headers - Headers to be sent with the request 
    # + return - check_share_job_status response 
    resource isolated function post sharing/check_share_job_status(PollArg payload, CheckShareJobStatusHeaders headers = {}) returns ShareFolderResponse|error {
        string resourcePath = string `/sharing/check_share_job_status`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # get_file_metadata
    #
    # + headers - Headers to be sent with the request 
    # + return - get_file_metadata response 
    resource isolated function post sharing/get_file_metadata(GetFileMetadataArg payload, GetFileMetadataHeaders headers = {}) returns SharedFileMetadata|error {
        string resourcePath = string `/sharing/get_file_metadata`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # get_file_metadata/batch
    #
    # + headers - Headers to be sent with the request 
    # + return - get_file_metadata/batch response 
    resource isolated function post sharing/get_file_metadata/batch(GetFileMetadataBatchArg payload, GetFileMetadataBatchHeaders headers = {}) returns GetFileMetadataIndividualResult[]|error {
        string resourcePath = string `/sharing/get_file_metadata/batch`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # get_folder_metadata
    #
    # + headers - Headers to be sent with the request 
    # + return - get_folder_metadata response 
    resource isolated function post sharing/get_folder_metadata(GetMetadataArgs payload, GetFolderMetadataHeaders headers = {}) returns SharedFolderMetadata|error {
        string resourcePath = string `/sharing/get_folder_metadata`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # get_shared_link_file
    #
    # + headers - Headers to be sent with the request 
    # + return - get_shared_link_file response 
    resource isolated function post sharing/get_shared_link_file(GetSharedLinkFileHeaders headers = {}) returns SharedLinkMetadata|error {
        string resourcePath = string `/sharing/get_shared_link_file`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # get_shared_link_metadata
    #
    # + headers - Headers to be sent with the request 
    # + return - get_shared_link_metadata response 
    resource isolated function post sharing/get_shared_link_metadata(GetSharedLinkMetadataArg payload, GetSharedLinkMetadataHeaders headers = {}) returns SharedLinkMetadata|error {
        string resourcePath = string `/sharing/get_shared_link_metadata`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # list_file_members
    #
    # + headers - Headers to be sent with the request 
    # + return - list_file_members response 
    resource isolated function post sharing/list_file_members(ListFileMembersArg payload, ListFileMembersHeaders headers = {}) returns SharedFileMembers|error {
        string resourcePath = string `/sharing/list_file_members`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post sharing/list_file_members/'continue(ListFileMembersContinueArg payload, ListFileMembersContinueHeaders headers = {}) returns SharedFileMembers|error {
        string resourcePath = string `/sharing/list_file_members/continue`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # list_file_members/batch
    #
    # + headers - Headers to be sent with the request 
    # + return - list_file_members/batch response 
    resource isolated function post sharing/list_file_members/batch(ListFileMembersBatchArg payload, ListFileMembersBatchHeaders headers = {}) returns ListFileMembersIndividualResult[]|error {
        string resourcePath = string `/sharing/list_file_members/batch`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post sharing/list_folder_members/'continue(ListFolderMembersContinueArg payload, ListFolderMembersContinueHeaders headers = {}) returns SharedFolderMembers|error {
        string resourcePath = string `/sharing/list_folder_members/continue`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # list_folders
    #
    # + headers - Headers to be sent with the request 
    # + return - list_folders response 
    resource isolated function post sharing/list_folders(ListFoldersArgs payload, ListFoldersHeaders headers = {}) returns ListFoldersResult|error {
        string resourcePath = string `/sharing/list_folders`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post sharing/list_folders/'continue(ListFoldersContinueArg payload, ListFoldersContinueHeaders headers = {}) returns ListFoldersResult|error {
        string resourcePath = string `/sharing/list_folders/continue`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # list_mountable_folders
    #
    # + headers - Headers to be sent with the request 
    # + return - list_mountable_folders response 
    resource isolated function post sharing/list_mountable_folders(ListFoldersArgs payload, ListMountableFoldersHeaders headers = {}) returns ListFoldersResult|error {
        string resourcePath = string `/sharing/list_mountable_folders`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post sharing/list_mountable_folders/'continue(ListFoldersContinueArg payload, ListMountableFoldersContinueHeaders headers = {}) returns ListFoldersResult|error {
        string resourcePath = string `/sharing/list_mountable_folders/continue`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # list_received_files
    #
    # + headers - Headers to be sent with the request 
    # + return - list_received_files response 
    resource isolated function post sharing/list_received_files(ListFilesArg payload, ListReceivedFilesHeaders headers = {}) returns ListFilesResult|error {
        string resourcePath = string `/sharing/list_received_files`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post sharing/list_received_files/'continue(ListFilesContinueArg payload, ListReceivedFilesContinueHeaders headers = {}) returns ListFilesResult|error {
        string resourcePath = string `/sharing/list_received_files/continue`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # list_shared_links
    #
    # + headers - Headers to be sent with the request 
    # + return - list_shared_links response 
    resource isolated function post sharing/list_shared_links(ListSharedLinksArg payload, ListSharedLinksHeaders headers = {}) returns ListSharedLinksResult|error {
        string resourcePath = string `/sharing/list_shared_links`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # modify_shared_link_settings
    #
    # + headers - Headers to be sent with the request 
    # + return - modify_shared_link_settings response 
    resource isolated function post sharing/modify_shared_link_settings(ModifySharedLinkSettingsArgs payload, ModifySharedLinkSettingsHeaders headers = {}) returns SharedLinkMetadata|error {
        string resourcePath = string `/sharing/modify_shared_link_settings`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # mount_folder
    #
    # + headers - Headers to be sent with the request 
    # + return - mount_folder response 
    resource isolated function post sharing/mount_folder(MountFolderArg payload, MountFolderHeaders headers = {}) returns SharedFolderMetadata|error {
        string resourcePath = string `/sharing/mount_folder`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # relinquish_file_membership
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post sharing/relinquish_file_membership(RelinquishFileMembershipArg payload, RelinquishFileMembershipHeaders headers = {}) returns error? {
        string resourcePath = string `/sharing/relinquish_file_membership`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # relinquish_folder_membership
    #
    # + headers - Headers to be sent with the request 
    # + return - relinquish_folder_membership response 
    resource isolated function post sharing/relinquish_folder_membership(RelinquishFolderMembershipArg payload, RelinquishFolderMembershipHeaders headers = {}) returns GenericResponseWithTag|error {
        string resourcePath = string `/sharing/relinquish_folder_membership`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # remove_file_member_2
    #
    # + headers - Headers to be sent with the request 
    # + return - remove_file_member_2 response 
    resource isolated function post sharing/remove_file_member_2(RemoveFileMemberArg payload, RemoveFileMember2Headers headers = {}) returns CustomQuotaResponse|error {
        string resourcePath = string `/sharing/remove_file_member_2`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # remove_folder_member
    #
    # + headers - Headers to be sent with the request 
    # + return - remove_folder_member response 
    resource isolated function post sharing/remove_folder_member(RemoveFolderMemberArg payload, RemoveFolderMemberHeaders headers = {}) returns LaunchResultBase|error {
        string resourcePath = string `/sharing/remove_folder_member`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # revoke_shared_link
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post sharing/revoke_shared_link(RevokeSharedLinkArg payload, RevokeSharedLinkHeaders headers = {}) returns error? {
        string resourcePath = string `/sharing/revoke_shared_link`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # set_access_inheritance
    #
    # + headers - Headers to be sent with the request 
    # + return - set_access_inheritance response 
    resource isolated function post sharing/set_access_inheritance(SetAccessInheritanceArg payload, SetAccessInheritanceHeaders headers = {}) returns ShareFolderResponse|error {
        string resourcePath = string `/sharing/set_access_inheritance`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # share_folder
    #
    # + headers - Headers to be sent with the request 
    # + return - share_folder response 
    resource isolated function post sharing/share_folder(ShareFolderArg payload, ShareFolderHeaders headers = {}) returns ShareFolderResponse|error {
        string resourcePath = string `/sharing/share_folder`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # transfer_folder
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post sharing/transfer_folder(TransferFolderArg payload, TransferFolderHeaders headers = {}) returns error? {
        string resourcePath = string `/sharing/transfer_folder`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # unmount_folder
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post sharing/unmount_folder(UnmountFolderArg payload, UnmountFolderHeaders headers = {}) returns error? {
        string resourcePath = string `/sharing/unmount_folder`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # unshare_file
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post sharing/unshare_file(UnshareFileArg payload, UnshareFileHeaders headers = {}) returns error? {
        string resourcePath = string `/sharing/unshare_file`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # unshare_folder
    #
    # + headers - Headers to be sent with the request 
    # + return - unshare_folder response 
    resource isolated function post sharing/unshare_folder(UnshareFolderArg payload, UnshareFolderHeaders headers = {}) returns GenericResponseWithTag|error {
        string resourcePath = string `/sharing/unshare_folder`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # update_file_member
    #
    # + headers - Headers to be sent with the request 
    # + return - update_file_member response 
    resource isolated function post sharing/update_file_member(UpdateFileMemberArgs payload, UpdateFileMemberHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/sharing/update_file_member`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # update_folder_member
    #
    # + headers - Headers to be sent with the request 
    # + return - update_folder_member response 
    resource isolated function post sharing/update_folder_member(UpdateFolderMemberArg payload, UpdateFolderMemberHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/sharing/update_folder_member`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # update_folder_policy
    #
    # + headers - Headers to be sent with the request 
    # + return - update_folder_policy response 
    resource isolated function post sharing/update_folder_policy(UpdateFolderPolicyArg payload, UpdateFolderPolicyHeaders headers = {}) returns SharedFolderMetadata|error {
        string resourcePath = string `/sharing/update_folder_policy`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # devices/list_member_devices
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post team/devices/list_member_devices(ListMemberDevicesArg payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/team/devices/list_member_devices`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # devices/list_members_devices
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post team/devices/list_members_devices(string payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/team/devices/list_members_devices`;
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # devices/revoke_device_session
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post team/devices/revoke_device_session(RevokeDeviceSessionArg payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/team/devices/revoke_device_session`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # devices/revoke_device_session_batch
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post team/devices/revoke_device_session_batch(RevokeDeviceSessionBatchArg payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/team/devices/revoke_device_session_batch`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # features/get_values
    #
    # + headers - Headers to be sent with the request 
    # + return - features/get_values response 
    resource isolated function post team/features/get_values(FeaturesGetValuesBatchArg payload, map<string|string[]> headers = {}) returns FeaturesGetValuesBatchResult|error {
        string resourcePath = string `/team/features/get_values`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # get_info
    #
    # + headers - Headers to be sent with the request 
    # + return - get_info response 
    resource isolated function post team/get_info(map<string|string[]> headers = {}) returns TeamGetInfoResult|error {
        string resourcePath = string `/team/get_info`;
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # groups/create
    #
    # + headers - Headers to be sent with the request 
    # + return - groups/create response 
    resource isolated function post team/groups/create(GroupCreateArg payload, map<string|string[]> headers = {}) returns GroupFullInfo|error {
        string resourcePath = string `/team/groups/create`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # groups/delete
    #
    # + headers - Headers to be sent with the request 
    # + return - groups/delete response 
    resource isolated function post team/groups/delete(GroupSelector payload, map<string|string[]> headers = {}) returns GenericResponseWithTag|error {
        string resourcePath = string `/team/groups/delete`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # groups/get_info
    #
    # + headers - Headers to be sent with the request 
    # + return - groups/get_info response 
    resource isolated function post team/groups/get_info(GroupsSelector payload, map<string|string[]> headers = {}) returns GroupsGetInfoItem[]|error {
        string resourcePath = string `/team/groups/get_info`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # groups/job_status/get
    #
    # + headers - Headers to be sent with the request 
    # + return - groups/job_status/get response 
    resource isolated function post team/groups/job_status/get(PollArg payload, map<string|string[]> headers = {}) returns GenericResponseWithTag|error {
        string resourcePath = string `/team/groups/job_status/get`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # groups/list
    #
    # + headers - Headers to be sent with the request 
    # + return - groups/list response 
    resource isolated function post team/groups/list(GroupsListArg payload, map<string|string[]> headers = {}) returns GroupsListResult|error {
        string resourcePath = string `/team/groups/list`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post team/groups/list/'continue(GroupsListContinueArg payload, map<string|string[]> headers = {}) returns GroupsListResult|error {
        string resourcePath = string `/team/groups/list/continue`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # groups/members/add
    #
    # + headers - Headers to be sent with the request 
    # + return - groups/members/add response 
    resource isolated function post team/groups/members/add(GroupMembersAddArg payload, map<string|string[]> headers = {}) returns GroupMembersChangeResult|error {
        string resourcePath = string `/team/groups/members/add`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # groups/members/list
    #
    # + headers - Headers to be sent with the request 
    # + return - groups/members/list response 
    resource isolated function post team/groups/members/list(GroupsMembersListArg payload, map<string|string[]> headers = {}) returns MembersListV2Result|error {
        string resourcePath = string `/team/groups/members/list`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post team/groups/members/list/'continue(GroupsMembersListContinueArg payload, map<string|string[]> headers = {}) returns MembersListV2Result|error {
        string resourcePath = string `/team/groups/members/list/continue`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # groups/members/remove
    #
    # + headers - Headers to be sent with the request 
    # + return - groups/members/remove response 
    resource isolated function post team/groups/members/remove(GroupMembersRemoveArg payload, map<string|string[]> headers = {}) returns GroupMembersChangeResult|error {
        string resourcePath = string `/team/groups/members/remove`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # groups/members/set_access_type
    #
    # + headers - Headers to be sent with the request 
    # + return - groups/members/set_access_type response 
    resource isolated function post team/groups/members/set_access_type(GroupMembersSetAccessTypeArg payload, map<string|string[]> headers = {}) returns GroupsGetInfoItem[]|error {
        string resourcePath = string `/team/groups/members/set_access_type`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # groups/update
    #
    # + headers - Headers to be sent with the request 
    # + return - groups/update response 
    resource isolated function post team/groups/update(GroupUpdateArgs payload, map<string|string[]> headers = {}) returns GroupFullInfo|error {
        string resourcePath = string `/team/groups/update`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # legal_holds/create_policy
    #
    # + headers - Headers to be sent with the request 
    # + return - legal_holds/create_policy response 
    resource isolated function post team/legal_holds/create_policy(LegalHoldsPolicyCreateArg payload, map<string|string[]> headers = {}) returns LegalHoldPolicy|error {
        string resourcePath = string `/team/legal_holds/create_policy`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # legal_holds/get_policy
    #
    # + headers - Headers to be sent with the request 
    # + return - legal_holds/get_policy response 
    resource isolated function post team/legal_holds/get_policy(LegalHoldsGetPolicyArg payload, map<string|string[]> headers = {}) returns LegalHoldPolicy|error {
        string resourcePath = string `/team/legal_holds/get_policy`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # legal_holds/list_held_revisions
    #
    # + headers - Headers to be sent with the request 
    # + return - legal_holds/list_held_revisions response 
    resource isolated function post team/legal_holds/list_held_revisions(LegalHoldsListHeldRevisionsArg payload, map<string|string[]> headers = {}) returns LegalHoldsListHeldRevisionResult|error {
        string resourcePath = string `/team/legal_holds/list_held_revisions`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # legal_holds/list_held_revisions_continue
    #
    # + headers - Headers to be sent with the request 
    # + return - legal_holds/list_held_revisions_continue response 
    resource isolated function post team/legal_holds/list_held_revisions_continue(LegalHoldsListHeldRevisionsContinueArg payload, map<string|string[]> headers = {}) returns LegalHoldsListHeldRevisionResult|error {
        string resourcePath = string `/team/legal_holds/list_held_revisions_continue`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # legal_holds/list_policies
    #
    # + headers - Headers to be sent with the request 
    # + return - legal_holds/list_policies response 
    resource isolated function post team/legal_holds/list_policies(LegalHoldsListPoliciesArg payload, map<string|string[]> headers = {}) returns LegalHoldsListPoliciesResult|error {
        string resourcePath = string `/team/legal_holds/list_policies`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # legal_holds/release_policy
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post team/legal_holds/release_policy(LegalHoldsPolicyReleaseArg payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/team/legal_holds/release_policy`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # legal_holds/update_policy
    #
    # + headers - Headers to be sent with the request 
    # + return - legal_holds/update_policy response 
    resource isolated function post team/legal_holds/update_policy(LegalHoldsPolicyUpdateArg payload, map<string|string[]> headers = {}) returns LegalHoldPolicy|error {
        string resourcePath = string `/team/legal_holds/update_policy`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # linked_apps/list_member_linked_apps
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post team/linked_apps/list_member_linked_apps(ListMemberAppsArg payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/team/linked_apps/list_member_linked_apps`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # linked_apps/list_members_linked_apps
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post team/linked_apps/list_members_linked_apps(string payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/team/linked_apps/list_members_linked_apps`;
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # linked_apps/revoke_linked_app
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post team/linked_apps/revoke_linked_app(string payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/team/linked_apps/revoke_linked_app`;
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # linked_apps/revoke_linked_app_batch
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post team/linked_apps/revoke_linked_app_batch(string payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/team/linked_apps/revoke_linked_app_batch`;
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # member_space_limits/excluded_users/add
    #
    # + headers - Headers to be sent with the request 
    # + return - member_space_limits/excluded_users/add response 
    resource isolated function post team/member_space_limits/excluded_users/add(ExcludedUsersUpdateArg payload, map<string|string[]> headers = {}) returns ExcludedUsersUpdateResult|error {
        string resourcePath = string `/team/member_space_limits/excluded_users/add`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # member_space_limits/excluded_users/list
    #
    # + headers - Headers to be sent with the request 
    # + return - member_space_limits/excluded_users/list response 
    resource isolated function post team/member_space_limits/excluded_users/list(ExcludedUsersListArg payload, map<string|string[]> headers = {}) returns ExcludedUsersListResult|error {
        string resourcePath = string `/team/member_space_limits/excluded_users/list`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post team/member_space_limits/excluded_users/list/'continue(ExcludedUsersListContinueArg payload, map<string|string[]> headers = {}) returns ExcludedUsersListResult|error {
        string resourcePath = string `/team/member_space_limits/excluded_users/list/continue`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # member_space_limits/excluded_users/remove
    #
    # + headers - Headers to be sent with the request 
    # + return - member_space_limits/excluded_users/remove response 
    resource isolated function post team/member_space_limits/excluded_users/remove(ExcludedUsersUpdateArg payload, map<string|string[]> headers = {}) returns ExcludedUsersUpdateResult|error {
        string resourcePath = string `/team/member_space_limits/excluded_users/remove`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # member_space_limits/get_custom_quota
    #
    # + headers - Headers to be sent with the request 
    # + return - member_space_limits/get_custom_quota response 
    resource isolated function post team/member_space_limits/get_custom_quota(CustomQuotaUsersArg payload, map<string|string[]> headers = {}) returns CustomQuotaResponse[]|error {
        string resourcePath = string `/team/member_space_limits/get_custom_quota`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # member_space_limits/remove_custom_quota
    #
    # + headers - Headers to be sent with the request 
    # + return - member_space_limits/remove_custom_quota response 
    resource isolated function post team/member_space_limits/remove_custom_quota(CustomQuotaUsersArg payload, map<string|string[]> headers = {}) returns CustomQuotaResponse[]|error {
        string resourcePath = string `/team/member_space_limits/remove_custom_quota`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # member_space_limits/set_custom_quota
    #
    # + headers - Headers to be sent with the request 
    # + return - member_space_limits/set_custom_quota response 
    resource isolated function post team/member_space_limits/set_custom_quota(SetCustomQuotaArg payload, map<string|string[]> headers = {}) returns CustomQuotaResponse[]|error {
        string resourcePath = string `/team/member_space_limits/set_custom_quota`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # members/add
    #
    # + headers - Headers to be sent with the request 
    # + return - members/add response 
    resource isolated function post team/members/add(MembersAddV2Arg payload, map<string|string[]> headers = {}) returns MembersAddResult|error {
        string resourcePath = string `/team/members/add`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # members/add/job_status/get
    #
    # + headers - Headers to be sent with the request 
    # + return - members/add/job_status/get response 
    resource isolated function post team/members/add/job_status/get(PollArg payload, map<string|string[]> headers = {}) returns MembersAddResult|error {
        string resourcePath = string `/team/members/add/job_status/get`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # members/delete_profile_photo
    #
    # + headers - Headers to be sent with the request 
    # + return - members/delete_profile_photo response 
    resource isolated function post team/members/delete_profile_photo(MembersDeleteProfilePhotoArg payload, map<string|string[]> headers = {}) returns TeamMemberInfoV2Result|error {
        string resourcePath = string `/team/members/delete_profile_photo`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # members/get_info
    #
    # + headers - Headers to be sent with the request 
    # + return - members/get_info response 
    resource isolated function post team/members/get_info(MembersGetInfoV2Arg payload, map<string|string[]> headers = {}) returns MembersGetInfoItem[]|error {
        string resourcePath = string `/team/members/get_info`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # members/list
    #
    # + headers - Headers to be sent with the request 
    # + return - members/list response 
    resource isolated function post team/members/list(MembersListArg payload, map<string|string[]> headers = {}) returns MembersListResult|error {
        string resourcePath = string `/team/members/list`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post team/members/list/'continue(MembersListContinueArg payload, map<string|string[]> headers = {}) returns MembersListResult|error {
        string resourcePath = string `/team/members/list/continue`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # members/move_former_member_files
    #
    # + headers - Headers to be sent with the request 
    # + return - members/move_former_member_files response 
    resource isolated function post team/members/move_former_member_files(MembersDataTransferArg payload, map<string|string[]> headers = {}) returns GenericResponseWithTag|error {
        string resourcePath = string `/team/members/move_former_member_files`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post team/members/move_former_member_files/job_status/'check(PollArg payload, map<string|string[]> headers = {}) returns GenericResponseWithTag|error {
        string resourcePath = string `/team/members/move_former_member_files/job_status/check`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # members/recover
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post team/members/recover(MembersRecoverArg payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/team/members/recover`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # members/remove
    #
    # + headers - Headers to be sent with the request 
    # + return - members/remove response 
    resource isolated function post team/members/remove(MembersRemoveArg payload, map<string|string[]> headers = {}) returns GenericResponseWithTag|error {
        string resourcePath = string `/team/members/remove`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # members/remove/job_status/get
    #
    # + headers - Headers to be sent with the request 
    # + return - members/remove/job_status/get response 
    resource isolated function post team/members/remove/job_status/get(PollArg payload, map<string|string[]> headers = {}) returns GenericResponseWithTag|error {
        string resourcePath = string `/team/members/remove/job_status/get`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # members/secondary_emails/add
    #
    # + headers - Headers to be sent with the request 
    # + return - members/secondary_emails/add response 
    resource isolated function post team/members/secondary_emails/add(AddSecondaryEmailsArg payload, map<string|string[]> headers = {}) returns AddSecondaryEmailsResult|error {
        string resourcePath = string `/team/members/secondary_emails/add`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # members/secondary_emails/delete
    #
    # + headers - Headers to be sent with the request 
    # + return - members/secondary_emails/delete response 
    resource isolated function post team/members/secondary_emails/delete(DeleteSecondaryEmailsArg payload, map<string|string[]> headers = {}) returns DeleteSecondaryEmailsResult|error {
        string resourcePath = string `/team/members/secondary_emails/delete`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # members/secondary_emails/resend_verification_emails
    #
    # + headers - Headers to be sent with the request 
    # + return - members/secondary_emails/resend_verification_emails response 
    resource isolated function post team/members/secondary_emails/resend_verification_emails(ResendVerificationEmailArg payload, map<string|string[]> headers = {}) returns ResendVerificationEmailResult|error {
        string resourcePath = string `/team/members/secondary_emails/resend_verification_emails`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # members/send_welcome_email
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post team/members/send_welcome_email(UserSelectorArg payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/team/members/send_welcome_email`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # members/set_admin_permissions
    #
    # + headers - Headers to be sent with the request 
    # + return - members/set_admin_permissions response 
    resource isolated function post team/members/set_admin_permissions(MembersSetPermissions2Arg payload, map<string|string[]> headers = {}) returns MembersSetPermissionsResult|error {
        string resourcePath = string `/team/members/set_admin_permissions`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # members/set_profile
    #
    # + headers - Headers to be sent with the request 
    # + return - members/set_profile response 
    resource isolated function post team/members/set_profile(MembersSetProfileArg payload, map<string|string[]> headers = {}) returns TeamMemberInfoV2Result|error {
        string resourcePath = string `/team/members/set_profile`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # members/set_profile_photo
    #
    # + headers - Headers to be sent with the request 
    # + return - members/set_profile_photo response 
    resource isolated function post team/members/set_profile_photo(MembersSetProfilePhotoArg payload, map<string|string[]> headers = {}) returns TeamMemberInfoV2Result|error {
        string resourcePath = string `/team/members/set_profile_photo`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # members/suspend
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post team/members/suspend(MembersDeactivateArg payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/team/members/suspend`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # members/unsuspend
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post team/members/unsuspend(MembersUnsuspendArg payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/team/members/unsuspend`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # namespaces/list
    #
    # + headers - Headers to be sent with the request 
    # + return - namespaces/list response 
    resource isolated function post team/namespaces/list(TeamNamespacesListArg payload, map<string|string[]> headers = {}) returns TeamNamespacesListResult|error {
        string resourcePath = string `/team/namespaces/list`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post team/namespaces/list/'continue(TeamNamespacesListContinueArg payload, map<string|string[]> headers = {}) returns TeamNamespacesListResult|error {
        string resourcePath = string `/team/namespaces/list/continue`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # reports/get_activity
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post team/reports/get_activity(string payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/team/reports/get_activity`;
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # reports/get_devices
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post team/reports/get_devices(string payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/team/reports/get_devices`;
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # reports/get_membership
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post team/reports/get_membership(string payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/team/reports/get_membership`;
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # reports/get_storage
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post team/reports/get_storage(string payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/team/reports/get_storage`;
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # team_folder/activate
    #
    # + headers - Headers to be sent with the request 
    # + return - team_folder/activate response 
    resource isolated function post team/team_folder/activate(TeamFolderIdArg payload, map<string|string[]> headers = {}) returns TeamFolderMetadata|error {
        string resourcePath = string `/team/team_folder/activate`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # team_folder/archive
    #
    # + headers - Headers to be sent with the request 
    # + return - team_folder/archive response 
    resource isolated function post team/team_folder/archive(TeamFolderArchiveArg payload, map<string|string[]> headers = {}) returns TeamFolderArchiveResponse|error {
        string resourcePath = string `/team/team_folder/archive`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post team/team_folder/archive/'check(PollArg payload, map<string|string[]> headers = {}) returns TeamFolderArchiveResponse|error {
        string resourcePath = string `/team/team_folder/archive/check`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # team_folder/create
    #
    # + headers - Headers to be sent with the request 
    # + return - team_folder/create response 
    resource isolated function post team/team_folder/create(TeamFolderCreateArg payload, map<string|string[]> headers = {}) returns TeamFolderMetadata|error {
        string resourcePath = string `/team/team_folder/create`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # team_folder/get_info
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post team/team_folder/get_info(TeamFolderIdListArg payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/team/team_folder/get_info`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # team_folder/list
    #
    # + headers - Headers to be sent with the request 
    # + return - team_folder/list response 
    resource isolated function post team/team_folder/list(TeamFolderListArg payload, map<string|string[]> headers = {}) returns TeamFolderListResult|error {
        string resourcePath = string `/team/team_folder/list`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post team/team_folder/list/'continue(TeamFolderListContinueArg payload, map<string|string[]> headers = {}) returns TeamFolderListResult|error {
        string resourcePath = string `/team/team_folder/list/continue`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # team_folder/permanently_delete
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post team/team_folder/permanently_delete(TeamFolderIdArg payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/team/team_folder/permanently_delete`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # team_folder/rename
    #
    # + headers - Headers to be sent with the request 
    # + return - team_folder/rename response 
    resource isolated function post team/team_folder/rename(TeamFolderRenameArg payload, map<string|string[]> headers = {}) returns TeamFolderMetadata|error {
        string resourcePath = string `/team/team_folder/rename`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # team_folder/update_sync_settings
    #
    # + headers - Headers to be sent with the request 
    # + return - team_folder/update_sync_settings response 
    resource isolated function post team/team_folder/update_sync_settings(TeamFolderUpdateSyncSettingsArg payload, map<string|string[]> headers = {}) returns TeamFolderMetadata|error {
        string resourcePath = string `/team/team_folder/update_sync_settings`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # token/get_authenticated_admin
    #
    # + headers - Headers to be sent with the request 
    # + return - token/get_authenticated_admin response 
    resource isolated function post team/token/get_authenticated_admin(map<string|string[]> headers = {}) returns TokenGetAuthenticatedAdminResult|error {
        string resourcePath = string `/team/token/get_authenticated_admin`;
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # get_events
    #
    # + headers - Headers to be sent with the request 
    # + return - get_events response 
    resource isolated function post team_log/get_events(GetTeamEventsArg payload, map<string|string[]> headers = {}) returns GetTeamEventsResult|error {
        string resourcePath = string `/team_log/get_events`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post team_log/get_events/'continue(GetTeamEventsContinueArg payload, map<string|string[]> headers = {}) returns GetTeamEventsResult|error {
        string resourcePath = string `/team_log/get_events/continue`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # features/get_values
    #
    # + headers - Headers to be sent with the request 
    # + return - features/get_values response 
    resource isolated function post users/features/get_values(UserFeaturesGetValuesBatchArg payload, FeaturesGetValues1Headers headers = {}) returns UserFeaturesGetValuesResult|error {
        string resourcePath = string `/users/features/get_values`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # get_account
    #
    # + headers - Headers to be sent with the request 
    # + return - get_account response 
    resource isolated function post users/get_account(GetAccountArg payload, GetAccountHeaders headers = {}) returns BasicAccount|error {
        string resourcePath = string `/users/get_account`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # get_account_batch
    #
    # + headers - Headers to be sent with the request 
    # + return - get_account_batch response 
    resource isolated function post users/get_account_batch(GetAccountBatchArg payload, GetAccountBatchHeaders headers = {}) returns BasicAccount[]|error {
        string resourcePath = string `/users/get_account_batch`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # get_current_account
    #
    # + headers - Headers to be sent with the request 
    # + return - get_current_account response 
    resource isolated function post users/get_current_account(GetCurrentAccountHeaders headers = {}) returns FullAccount|error {
        string resourcePath = string `/users/get_current_account`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # get_space_usage
    #
    # + headers - Headers to be sent with the request 
    # + return - get_space_usage response 
    resource isolated function post users/get_space_usage(GetSpaceUsageHeaders headers = {}) returns SpaceUsage|error {
        string resourcePath = string `/users/get_space_usage`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }
}
