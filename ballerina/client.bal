// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2024, WSO2 LLC. (http://www.wso2.com).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/http;

# The powerful, yet simple, Dropbox API allows you to manage and control content and team settings programmatically and extend Dropbox capabilities in new and powerful ways. This is a collection that includes requests to all endpoints in the Dropbox API. 
# 
# The Dropbox API is divided in two groups of endpoints: User Endpoints and Business Endpoints. Operations that would most likely be executed by a user, such as file operations, are in the User Endpoints folder. Operations that would most likely be executed by a team administrator, such as adding users to groups, live in the Business Endpoints folder. 
# 
# If you are new to Dropbox Business and Team Administration, please have a look at the [Dropobox Admin Guide](https://help.dropbox.com/guide/admin/how-to-get-started#dropbox-admin-guide). 
# 
# If you want more information on how to use our API please refer to our [Developer Portal](https://www.dropbox.com/developers). 
# 
# # What's in the collection?
# 
# The endpoints are organized in the following folders:
# * account
# * auth
# * check
# * contacts
# * file_properties
# * file_requests
# * files
# * sharing
# * team
# * team_log
# * users
# 
# # Authorization
# 
# ## OAuth 2.0 for API Access
# Dropbox uses OAuth 2.0, an open specification, to authorize access to data. To get an OAuth token from Dropbox to enable Postman to access your Dropbox account via the API you’ll need to create a new app on the DBX Platform.
# 
# ## Creating an App on the DBX Platform
# Navigate to https://www.dropbox.com/developers/apps and select “Create app” 
# 1. Choose an API  
# 2. Choose the type of access you need 
# 3. Give your app a name  
# 4. Choose the Dropbox account that will own your app  
# 
# For reference, please use the [Dropbox OAuth guide](https://www.dropbox.com/lp/developers/reference/oauth-guide) 
# 
# ## Generating an Access Token
# Once you select “Create app” a page will load that displays information about your newly created app. To generate an access token scroll down to “OAuth 2” and click “Generate” beneath “Generated access token.” The token will display as a long string of characters. Copy this token for use with the Postman Collection.
# 
# ## Adding an Access Token to the requests
# In the Postman client, click on the three dots to the right of the collection name to "View more actions."
# 
# ![Screenshot of adding access token](https://www.dropbox.com/s/sfebu9ai76cbq39/Screen%20Shot%202020-10-28%20at%2012.50.56%20AM.png?raw=1)
# 
# Then, click "Edit."
# 
# Click on the "Variables" tab and, in the row for the `access_token` variable, paste your access token in the `CURRENT VALUE` column. The default value is `your-access-token-here`.
# 
# ![Screenshot of adding access token](https://www.dropbox.com/s/ahnbxwe6oscjues/Screen%20Shot%202020-10-28%20at%2012.51.13%20AM.png?raw=1)
# 
# For information on sessions and variables in Postman see the blog post at https://blog.postman.com/sessions-faq/.
# 
# # Notes
# * Dropbox also has a Postman Collection in the API Network to help administrators with team management workflows. It is called [Dropbox Team Admin Workflows](). 
public isolated client class Client {
    final http:Client clientEp;
    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string serviceUrl = "https://api.dropboxapi.com") returns error? {
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, timeout: config.timeout, forwarded: config.forwarded, poolConfig: config.poolConfig, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, validation: config.validation};
        do {
            if config.http1Settings is ClientHttp1Settings {
                ClientHttp1Settings settings = check config.http1Settings.ensureType(ClientHttp1Settings);
                httpClientConfig.http1Settings = {...settings};
            }
            if config.http2Settings is http:ClientHttp2Settings {
                httpClientConfig.http2Settings = check config.http2Settings.ensureType(http:ClientHttp2Settings);
            }
            if config.cache is http:CacheConfig {
                httpClientConfig.cache = check config.cache.ensureType(http:CacheConfig);
            }
            if config.responseLimits is http:ResponseLimitConfigs {
                httpClientConfig.responseLimits = check config.responseLimits.ensureType(http:ResponseLimitConfigs);
            }
            if config.secureSocket is http:ClientSecureSocket {
                httpClientConfig.secureSocket = check config.secureSocket.ensureType(http:ClientSecureSocket);
            }
            if config.proxy is http:ProxyConfig {
                httpClientConfig.proxy = check config.proxy.ensureType(http:ProxyConfig);
            }
        }
        http:Client httpEp = check new (serviceUrl, httpClientConfig);
        self.clientEp = httpEp;
        return;
    }

    resource isolated function post '2/'check/app(check_app_body payload, AppHeaders headers = {}) returns inline_response_200_2|error {
        string resourcePath = string `/2/check/app`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/'check/user(check_user_body payload, UserHeaders headers = {}) returns inline_response_200_2|error {
        string resourcePath = string `/2/check/user`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/account/set_profile_photo(account_set_profile_photo_body payload, SetProfilePhotoHeaders headers = {}) returns inline_response_200|error {
        string resourcePath = string `/2/account/set_profile_photo`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/auth/token/from_oauth1(token_from_oauth1_body payload, TokenFromOauth1Headers headers = {}) returns inline_response_200_1|error {
        string resourcePath = string `/2/auth/token/from_oauth1`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/auth/token/revoke(TokenRevokeHeaders headers = {}) returns error? {
        string resourcePath = string `/2/auth/token/revoke`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/contacts/delete_manual_contacts(DeleteManualContactsHeaders headers = {}) returns error? {
        string resourcePath = string `/2/contacts/delete_manual_contacts`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/contacts/delete_manual_contacts_batch(contacts_delete_manual_contacts_batch_body payload, DeleteManualContactsBatchHeaders headers = {}) returns error? {
        string resourcePath = string `/2/contacts/delete_manual_contacts_batch`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/file_properties/properties/add(properties_add_body payload, PropertiesAddHeaders headers = {}) returns error? {
        string resourcePath = string `/2/file_properties/properties/add`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/file_properties/properties/overwrite(properties_overwrite_body payload, PropertiesOverwriteHeaders headers = {}) returns error? {
        string resourcePath = string `/2/file_properties/properties/overwrite`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/file_properties/properties/remove(properties_remove_body payload, PropertiesRemoveHeaders headers = {}) returns error? {
        string resourcePath = string `/2/file_properties/properties/remove`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/file_properties/properties/search(properties_search_body payload, PropertiesSearchHeaders headers = {}) returns inline_response_200_3|error {
        string resourcePath = string `/2/file_properties/properties/search`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/file_properties/properties/search/'continue(search_continue_body payload, PropertiesSearchContinueHeaders headers = {}) returns inline_response_200_3|error {
        string resourcePath = string `/2/file_properties/properties/search/continue`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/file_properties/properties/update(properties_update_body payload, PropertiesUpdateHeaders headers = {}) returns error? {
        string resourcePath = string `/2/file_properties/properties/update`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/file_properties/templates/add_for_team(templates_add_for_team_body payload, map<string|string[]> headers = {}) returns inline_response_200_4|error {
        string resourcePath = string `/2/file_properties/templates/add_for_team`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/file_properties/templates/add_for_user(templates_add_for_user_body payload, TemplatesAddForUserHeaders headers = {}) returns inline_response_200_4|error {
        string resourcePath = string `/2/file_properties/templates/add_for_user`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/file_properties/templates/get_for_team(templates_get_for_team_body payload, map<string|string[]> headers = {}) returns inline_response_200_5|error {
        string resourcePath = string `/2/file_properties/templates/get_for_team`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/file_properties/templates/get_for_user(templates_get_for_user_body payload, TemplatesGetForUserHeaders headers = {}) returns inline_response_200_5|error {
        string resourcePath = string `/2/file_properties/templates/get_for_user`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/file_properties/templates/list_for_team(map<string|string[]> headers = {}) returns inline_response_200_6|error {
        string resourcePath = string `/2/file_properties/templates/list_for_team`;
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/file_properties/templates/list_for_user(TemplatesListForUserHeaders headers = {}) returns inline_response_200_6|error {
        string resourcePath = string `/2/file_properties/templates/list_for_user`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/file_properties/templates/remove_for_team(templates_remove_for_team_body payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/2/file_properties/templates/remove_for_team`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/file_properties/templates/remove_for_user(templates_remove_for_user_body payload, TemplatesRemoveForUserHeaders headers = {}) returns error? {
        string resourcePath = string `/2/file_properties/templates/remove_for_user`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/file_properties/templates/update_for_team(templates_update_for_team_body payload, map<string|string[]> headers = {}) returns templates_remove_for_user_body|error {
        string resourcePath = string `/2/file_properties/templates/update_for_team`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/file_properties/templates/update_for_user(templates_update_for_user_body payload, TemplatesUpdateForUserHeaders headers = {}) returns templates_remove_for_user_body|error {
        string resourcePath = string `/2/file_properties/templates/update_for_user`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/file_requests/count(CountHeaders headers = {}) returns inline_response_200_7|error {
        string resourcePath = string `/2/file_requests/count`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/file_requests/create(file_requests_create_body payload, CreateHeaders headers = {}) returns inline_response_200_8|error {
        string resourcePath = string `/2/file_requests/create`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/file_requests/delete(file_requests_delete_body payload, DeleteHeaders headers = {}) returns inline_response_200_9|error {
        string resourcePath = string `/2/file_requests/delete`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/file_requests/delete_all_closed(DeleteAllClosedHeaders headers = {}) returns inline_response_200_9|error {
        string resourcePath = string `/2/file_requests/delete_all_closed`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/file_requests/get(file_requests_get_body payload, GetHeaders headers = {}) returns inline_response_200_8|error {
        string resourcePath = string `/2/file_requests/get`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/file_requests/list/'continue(list_continue_body payload, ListContinueHeaders headers = {}) returns inline_response_200_10|error {
        string resourcePath = string `/2/file_requests/list/continue`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/file_requests/list_v2(file_requests_list_v2_body payload, ListHeaders headers = {}) returns inline_response_200_10|error {
        string resourcePath = string `/2/file_requests/list_v2`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/file_requests/update(file_requests_update_body payload, UpdateHeaders headers = {}) returns inline_response_200_8|error {
        string resourcePath = string `/2/file_requests/update`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/copy_batch/check_v2(copy_batch_check_v2_body payload, CopyBatchCheckHeaders headers = {}) returns inline_response_200_12|error {
        string resourcePath = string `/2/files/copy_batch/check_v2`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/copy_batch_v2(files_copy_batch_v2_body payload, CopyBatchHeaders headers = {}) returns inline_response_200_12|error {
        string resourcePath = string `/2/files/copy_batch_v2`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/copy_reference/get(copy_reference_get_body payload, CopyReferenceGetHeaders headers = {}) returns inline_response_200_13|error {
        string resourcePath = string `/2/files/copy_reference/get`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/copy_reference/save(copy_reference_save_body payload, CopyReferenceSaveHeaders headers = {}) returns inline_response_200_11|error {
        string resourcePath = string `/2/files/copy_reference/save`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/copy_v2(files_copy_v2_body payload, CopyHeaders headers = {}) returns inline_response_200_11|error {
        string resourcePath = string `/2/files/copy_v2`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/create_folder_batch(files_create_folder_batch_body payload, CreateFolderBatchHeaders headers = {}) returns inline_response_200_15|error {
        string resourcePath = string `/2/files/create_folder_batch`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/create_folder_batch/'check(create_folder_batch_check_body payload, CreateFolderBatchCheckHeaders headers = {}) returns inline_response_200_15|error {
        string resourcePath = string `/2/files/create_folder_batch/check`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/create_folder_v2(files_create_folder_v2_body payload, CreateFolderHeaders headers = {}) returns inline_response_200_14|error {
        string resourcePath = string `/2/files/create_folder_v2`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/delete_batch(files_delete_batch_body payload, DeleteBatchHeaders headers = {}) returns inline_response_200_16|error {
        string resourcePath = string `/2/files/delete_batch`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/delete_batch/'check(delete_batch_check_body payload, DeleteBatchCheckHeaders headers = {}) returns inline_response_200_16|error {
        string resourcePath = string `/2/files/delete_batch/check`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/delete_v2(files_delete_v2_body payload, Delete1Headers headers = {}) returns inline_response_200_11|error {
        string resourcePath = string `/2/files/delete_v2`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/download(DownloadHeaders headers = {}) returns inline_response_200_17|error {
        string resourcePath = string `/2/files/download`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/download_zip(DownloadZipHeaders headers = {}) returns inline_response_200_14|error {
        string resourcePath = string `/2/files/download_zip`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/export(ExportHeaders headers = {}) returns inline_response_200_18|error {
        string resourcePath = string `/2/files/export`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/get_file_lock_batch(files_get_file_lock_batch_body payload, GetFileLockBatchHeaders headers = {}) returns inline_response_200_19|error {
        string resourcePath = string `/2/files/get_file_lock_batch`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/get_metadata(files_get_metadata_body payload, GetMetadataHeaders headers = {}) returns inline_response_200_20|error {
        string resourcePath = string `/2/files/get_metadata`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/get_preview(GetPreviewHeaders headers = {}) returns inline_response_200_17|error {
        string resourcePath = string `/2/files/get_preview`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/get_temporary_link(files_get_temporary_link_body payload, GetTemporaryLinkHeaders headers = {}) returns inline_response_200_21|error {
        string resourcePath = string `/2/files/get_temporary_link`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/get_temporary_upload_link(files_get_temporary_upload_link_body payload, GetTemporaryUploadLinkHeaders headers = {}) returns inline_response_200_22|error {
        string resourcePath = string `/2/files/get_temporary_upload_link`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/get_thumbnail_batch(files_get_thumbnail_batch_body payload, GetThumbnailBatchHeaders headers = {}) returns inline_response_200_24|error {
        string resourcePath = string `/2/files/get_thumbnail_batch`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/get_thumbnail_v2(GetThumbnailHeaders headers = {}) returns inline_response_200_23|error {
        string resourcePath = string `/2/files/get_thumbnail_v2`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/list_folder(files_list_folder_body payload, ListFolderHeaders headers = {}) returns inline_response_200_25|error {
        string resourcePath = string `/2/files/list_folder`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/list_folder/'continue(list_folder_continue_body payload, ListFolderContinueHeaders headers = {}) returns inline_response_200_25|error {
        string resourcePath = string `/2/files/list_folder/continue`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/list_folder/get_latest_cursor(list_folder_get_latest_cursor_body payload, ListFolderGetLatestCursorHeaders headers = {}) returns list_folder_continue_body|error {
        string resourcePath = string `/2/files/list_folder/get_latest_cursor`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/list_folder/longpoll(list_folder_longpoll_body payload, ListFolderLongpollHeaders headers = {}) returns inline_response_200_26|error {
        string resourcePath = string `/2/files/list_folder/longpoll`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/list_revisions(files_list_revisions_body payload, ListRevisionsHeaders headers = {}) returns inline_response_200_27|error {
        string resourcePath = string `/2/files/list_revisions`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/lock_file_batch(files_lock_file_batch_body payload, LockFileBatchHeaders headers = {}) returns inline_response_200_19|error {
        string resourcePath = string `/2/files/lock_file_batch`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/move_batch/check_v2(move_batch_check_v2_body payload, MoveBatchCheckHeaders headers = {}) returns inline_response_200_12|error {
        string resourcePath = string `/2/files/move_batch/check_v2`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/move_batch_v2(files_move_batch_v2_body payload, MoveBatchHeaders headers = {}) returns inline_response_200_12|error {
        string resourcePath = string `/2/files/move_batch_v2`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/move_v2(files_move_v2_body payload, MoveHeaders headers = {}) returns inline_response_200_11|error {
        string resourcePath = string `/2/files/move_v2`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/permanently_delete(files_permanently_delete_body payload, PermanentlyDeleteHeaders headers = {}) returns error? {
        string resourcePath = string `/2/files/permanently_delete`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/restore(files_restore_body payload, RestoreHeaders headers = {}) returns inline_response_200_17|error {
        string resourcePath = string `/2/files/restore`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/save_url(files_save_url_body payload, SaveUrlHeaders headers = {}) returns inline_response_200_28|error {
        string resourcePath = string `/2/files/save_url`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/save_url/check_job_status(save_url_check_job_status_body payload, SaveUrlCheckJobStatusHeaders headers = {}) returns inline_response_200_29|error {
        string resourcePath = string `/2/files/save_url/check_job_status`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/search/continue_v2(search_continue_v2_body payload, SearchContinueHeaders headers = {}) returns inline_response_200_30|error {
        string resourcePath = string `/2/files/search/continue_v2`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/search_v2(files_search_v2_body payload, SearchHeaders headers = {}) returns inline_response_200_30|error {
        string resourcePath = string `/2/files/search_v2`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/unlock_file_batch(files_unlock_file_batch_body payload, UnlockFileBatchHeaders headers = {}) returns inline_response_200_19|error {
        string resourcePath = string `/2/files/unlock_file_batch`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/upload(UploadHeaders headers = {}) returns inline_response_200_17|error {
        string resourcePath = string `/2/files/upload`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/upload_session/'start(UploadSessionStartHeaders headers = {}) returns inline_response_200_32|error {
        string resourcePath = string `/2/files/upload_session/start`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/upload_session/append_v2(UploadSessionAppendHeaders headers = {}) returns error? {
        string resourcePath = string `/2/files/upload_session/append_v2`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/upload_session/finish(UploadSessionFinishHeaders headers = {}) returns inline_response_200_17|error {
        string resourcePath = string `/2/files/upload_session/finish`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/upload_session/finish_batch(upload_session_finish_batch_body payload, UploadSessionFinishBatchHeaders headers = {}) returns inline_response_200_31|error {
        string resourcePath = string `/2/files/upload_session/finish_batch`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/upload_session/finish_batch/'check(finish_batch_check_body payload, UploadSessionFinishBatchCheckHeaders headers = {}) returns inline_response_200_31|error {
        string resourcePath = string `/2/files/upload_session/finish_batch/check`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/add_file_member(sharing_add_file_member_body payload, AddFileMemberHeaders headers = {}) returns inline_response_200_33[]|error {
        string resourcePath = string `/2/sharing/add_file_member`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/add_folder_member(sharing_add_folder_member_body payload, AddFolderMemberHeaders headers = {}) returns error? {
        string resourcePath = string `/2/sharing/add_folder_member`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/check_job_status(sharing_check_job_status_body payload, CheckJobStatusHeaders headers = {}) returns inline_response_200_29|error {
        string resourcePath = string `/2/sharing/check_job_status`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/check_remove_member_job_status(sharing_check_remove_member_job_status_body payload, CheckRemoveMemberJobStatusHeaders headers = {}) returns inline_response_200_34|error {
        string resourcePath = string `/2/sharing/check_remove_member_job_status`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/check_share_job_status(sharing_check_share_job_status_body payload, CheckShareJobStatusHeaders headers = {}) returns inline_response_200_35|error {
        string resourcePath = string `/2/sharing/check_share_job_status`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/get_file_metadata(sharing_get_file_metadata_body payload, GetFileMetadataHeaders headers = {}) returns inline_response_200_36|error {
        string resourcePath = string `/2/sharing/get_file_metadata`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/get_file_metadata/batch(get_file_metadata_batch_body payload, GetFileMetadataBatchHeaders headers = {}) returns inline_response_200_37[]|error {
        string resourcePath = string `/2/sharing/get_file_metadata/batch`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/get_folder_metadata(sharing_get_folder_metadata_body payload, GetFolderMetadataHeaders headers = {}) returns inline_response_200_38|error {
        string resourcePath = string `/2/sharing/get_folder_metadata`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/get_shared_link_file(GetSharedLinkFileHeaders headers = {}) returns inline_response_200_39|error {
        string resourcePath = string `/2/sharing/get_shared_link_file`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/get_shared_link_metadata(sharing_get_shared_link_metadata_body payload, GetSharedLinkMetadataHeaders headers = {}) returns inline_response_200_39|error {
        string resourcePath = string `/2/sharing/get_shared_link_metadata`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/list_file_members(sharing_list_file_members_body payload, ListFileMembersHeaders headers = {}) returns inline_response_200_40|error {
        string resourcePath = string `/2/sharing/list_file_members`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/list_file_members/'continue(list_file_members_continue_body payload, ListFileMembersContinueHeaders headers = {}) returns inline_response_200_40|error {
        string resourcePath = string `/2/sharing/list_file_members/continue`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/list_file_members/batch(list_file_members_batch_body payload, ListFileMembersBatchHeaders headers = {}) returns inline_response_200_41[]|error {
        string resourcePath = string `/2/sharing/list_file_members/batch`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/list_folder_members/'continue(list_folder_members_continue_body payload, ListFolderMembersContinueHeaders headers = {}) returns inline_response_200_42|error {
        string resourcePath = string `/2/sharing/list_folder_members/continue`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/list_folders(sharing_list_folders_body payload, ListFoldersHeaders headers = {}) returns inline_response_200_43|error {
        string resourcePath = string `/2/sharing/list_folders`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/list_folders/'continue(list_folders_continue_body payload, ListFoldersContinueHeaders headers = {}) returns inline_response_200_43|error {
        string resourcePath = string `/2/sharing/list_folders/continue`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/list_mountable_folders(sharing_list_mountable_folders_body payload, ListMountableFoldersHeaders headers = {}) returns inline_response_200_43|error {
        string resourcePath = string `/2/sharing/list_mountable_folders`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/list_mountable_folders/'continue(list_mountable_folders_continue_body payload, ListMountableFoldersContinueHeaders headers = {}) returns inline_response_200_43|error {
        string resourcePath = string `/2/sharing/list_mountable_folders/continue`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/list_received_files(sharing_list_received_files_body payload, ListReceivedFilesHeaders headers = {}) returns inline_response_200_44|error {
        string resourcePath = string `/2/sharing/list_received_files`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/list_received_files/'continue(list_received_files_continue_body payload, ListReceivedFilesContinueHeaders headers = {}) returns inline_response_200_44|error {
        string resourcePath = string `/2/sharing/list_received_files/continue`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/list_shared_links(sharing_list_shared_links_body payload, ListSharedLinksHeaders headers = {}) returns inline_response_200_45|error {
        string resourcePath = string `/2/sharing/list_shared_links`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/modify_shared_link_settings(sharing_modify_shared_link_settings_body payload, ModifySharedLinkSettingsHeaders headers = {}) returns inline_response_200_39|error {
        string resourcePath = string `/2/sharing/modify_shared_link_settings`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/mount_folder(sharing_mount_folder_body payload, MountFolderHeaders headers = {}) returns inline_response_200_38|error {
        string resourcePath = string `/2/sharing/mount_folder`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/relinquish_file_membership(sharing_relinquish_file_membership_body payload, RelinquishFileMembershipHeaders headers = {}) returns error? {
        string resourcePath = string `/2/sharing/relinquish_file_membership`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/relinquish_folder_membership(sharing_relinquish_folder_membership_body payload, RelinquishFolderMembershipHeaders headers = {}) returns inline_response_200_34|error {
        string resourcePath = string `/2/sharing/relinquish_folder_membership`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/remove_file_member_2(sharing_remove_file_member_2_body payload, RemoveFileMember2Headers headers = {}) returns inline_response_200_46|error {
        string resourcePath = string `/2/sharing/remove_file_member_2`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/remove_folder_member(sharing_remove_folder_member_body payload, RemoveFolderMemberHeaders headers = {}) returns inline_response_200_47|error {
        string resourcePath = string `/2/sharing/remove_folder_member`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/revoke_shared_link(sharing_revoke_shared_link_body payload, RevokeSharedLinkHeaders headers = {}) returns error? {
        string resourcePath = string `/2/sharing/revoke_shared_link`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/set_access_inheritance(sharing_set_access_inheritance_body payload, SetAccessInheritanceHeaders headers = {}) returns inline_response_200_35|error {
        string resourcePath = string `/2/sharing/set_access_inheritance`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/share_folder(sharing_share_folder_body payload, ShareFolderHeaders headers = {}) returns inline_response_200_35|error {
        string resourcePath = string `/2/sharing/share_folder`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/transfer_folder(sharing_transfer_folder_body payload, TransferFolderHeaders headers = {}) returns error? {
        string resourcePath = string `/2/sharing/transfer_folder`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/unmount_folder(sharing_unmount_folder_body payload, UnmountFolderHeaders headers = {}) returns error? {
        string resourcePath = string `/2/sharing/unmount_folder`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/unshare_file(sharing_unshare_file_body payload, UnshareFileHeaders headers = {}) returns error? {
        string resourcePath = string `/2/sharing/unshare_file`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/unshare_folder(sharing_unshare_folder_body payload, UnshareFolderHeaders headers = {}) returns inline_response_200_34|error {
        string resourcePath = string `/2/sharing/unshare_folder`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/update_file_member(sharing_update_file_member_body payload, UpdateFileMemberHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/sharing/update_file_member`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/update_folder_member(sharing_update_folder_member_body payload, UpdateFolderMemberHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/sharing/update_folder_member`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/update_folder_policy(sharing_update_folder_policy_body payload, UpdateFolderPolicyHeaders headers = {}) returns inline_response_200_38|error {
        string resourcePath = string `/2/sharing/update_folder_policy`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/devices/list_member_devices(devices_list_member_devices_body payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/2/team/devices/list_member_devices`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/devices/list_members_devices(string payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/2/team/devices/list_members_devices`;
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/devices/revoke_device_session(devices_revoke_device_session_body payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/2/team/devices/revoke_device_session`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/devices/revoke_device_session_batch(devices_revoke_device_session_batch_body payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/2/team/devices/revoke_device_session_batch`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/features/get_values(features_get_values_body payload, map<string|string[]> headers = {}) returns inline_response_200_70|error {
        string resourcePath = string `/2/team/features/get_values`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/get_info(map<string|string[]> headers = {}) returns inline_response_200_71|error {
        string resourcePath = string `/2/team/get_info`;
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/groups/create(groups_create_body payload, map<string|string[]> headers = {}) returns inline_response_200_48|error {
        string resourcePath = string `/2/team/groups/create`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/groups/delete(groups_delete_body payload, map<string|string[]> headers = {}) returns inline_response_200_34|error {
        string resourcePath = string `/2/team/groups/delete`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/groups/get_info(groups_get_info_body payload, map<string|string[]> headers = {}) returns inline_response_200_49[]|error {
        string resourcePath = string `/2/team/groups/get_info`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/groups/job_status/get(job_status_get_body payload, map<string|string[]> headers = {}) returns inline_response_200_34|error {
        string resourcePath = string `/2/team/groups/job_status/get`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/groups/list(groups_list_body payload, map<string|string[]> headers = {}) returns inline_response_200_50|error {
        string resourcePath = string `/2/team/groups/list`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/groups/list/'continue(list_continue_body_1 payload, map<string|string[]> headers = {}) returns inline_response_200_50|error {
        string resourcePath = string `/2/team/groups/list/continue`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/groups/members/add(members_add_body payload, map<string|string[]> headers = {}) returns inline_response_200_51|error {
        string resourcePath = string `/2/team/groups/members/add`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/groups/members/list(members_list_body payload, map<string|string[]> headers = {}) returns inline_response_200_52|error {
        string resourcePath = string `/2/team/groups/members/list`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/groups/members/list/'continue(list_continue_body_2 payload, map<string|string[]> headers = {}) returns inline_response_200_52|error {
        string resourcePath = string `/2/team/groups/members/list/continue`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/groups/members/remove(members_remove_body payload, map<string|string[]> headers = {}) returns inline_response_200_51|error {
        string resourcePath = string `/2/team/groups/members/remove`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/groups/members/set_access_type(members_set_access_type_body payload, map<string|string[]> headers = {}) returns inline_response_200_49[]|error {
        string resourcePath = string `/2/team/groups/members/set_access_type`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/groups/update(groups_update_body payload, map<string|string[]> headers = {}) returns inline_response_200_48|error {
        string resourcePath = string `/2/team/groups/update`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/legal_holds/create_policy(legal_holds_create_policy_body payload, map<string|string[]> headers = {}) returns inline_response_200_53|error {
        string resourcePath = string `/2/team/legal_holds/create_policy`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/legal_holds/get_policy(legal_holds_get_policy_body payload, map<string|string[]> headers = {}) returns inline_response_200_53|error {
        string resourcePath = string `/2/team/legal_holds/get_policy`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/legal_holds/list_held_revisions(legal_holds_list_held_revisions_body payload, map<string|string[]> headers = {}) returns inline_response_200_54|error {
        string resourcePath = string `/2/team/legal_holds/list_held_revisions`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/legal_holds/list_held_revisions_continue(legal_holds_list_held_revisions_continue_body payload, map<string|string[]> headers = {}) returns inline_response_200_54|error {
        string resourcePath = string `/2/team/legal_holds/list_held_revisions_continue`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/legal_holds/list_policies(legal_holds_list_policies_body payload, map<string|string[]> headers = {}) returns inline_response_200_55|error {
        string resourcePath = string `/2/team/legal_holds/list_policies`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/legal_holds/release_policy(legal_holds_release_policy_body payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/2/team/legal_holds/release_policy`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/legal_holds/update_policy(legal_holds_update_policy_body payload, map<string|string[]> headers = {}) returns inline_response_200_53|error {
        string resourcePath = string `/2/team/legal_holds/update_policy`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/linked_apps/list_member_linked_apps(linked_apps_list_member_linked_apps_body payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/2/team/linked_apps/list_member_linked_apps`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/linked_apps/list_members_linked_apps(string payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/2/team/linked_apps/list_members_linked_apps`;
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/linked_apps/revoke_linked_app(string payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/2/team/linked_apps/revoke_linked_app`;
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/linked_apps/revoke_linked_app_batch(string payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/2/team/linked_apps/revoke_linked_app_batch`;
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/member_space_limits/excluded_users/add(excluded_users_add_body payload, map<string|string[]> headers = {}) returns inline_response_200_56|error {
        string resourcePath = string `/2/team/member_space_limits/excluded_users/add`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/member_space_limits/excluded_users/list(excluded_users_list_body payload, map<string|string[]> headers = {}) returns inline_response_200_57|error {
        string resourcePath = string `/2/team/member_space_limits/excluded_users/list`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/member_space_limits/excluded_users/list/'continue(list_continue_body_3 payload, map<string|string[]> headers = {}) returns inline_response_200_57|error {
        string resourcePath = string `/2/team/member_space_limits/excluded_users/list/continue`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/member_space_limits/excluded_users/remove(excluded_users_remove_body payload, map<string|string[]> headers = {}) returns inline_response_200_56|error {
        string resourcePath = string `/2/team/member_space_limits/excluded_users/remove`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/member_space_limits/get_custom_quota(member_space_limits_get_custom_quota_body payload, map<string|string[]> headers = {}) returns inline_response_200_46[]|error {
        string resourcePath = string `/2/team/member_space_limits/get_custom_quota`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/member_space_limits/remove_custom_quota(member_space_limits_remove_custom_quota_body payload, map<string|string[]> headers = {}) returns inline_response_200_46[]|error {
        string resourcePath = string `/2/team/member_space_limits/remove_custom_quota`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/member_space_limits/set_custom_quota(member_space_limits_set_custom_quota_body payload, map<string|string[]> headers = {}) returns inline_response_200_46[]|error {
        string resourcePath = string `/2/team/member_space_limits/set_custom_quota`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/members/add(members_add_body_1 payload, map<string|string[]> headers = {}) returns inline_response_200_58|error {
        string resourcePath = string `/2/team/members/add`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/members/add/job_status/get(job_status_get_body_1 payload, map<string|string[]> headers = {}) returns inline_response_200_58|error {
        string resourcePath = string `/2/team/members/add/job_status/get`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/members/delete_profile_photo(members_delete_profile_photo_body payload, map<string|string[]> headers = {}) returns inline_response_200_59|error {
        string resourcePath = string `/2/team/members/delete_profile_photo`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/members/get_info(members_get_info_body payload, map<string|string[]> headers = {}) returns inline_response_200_60[]|error {
        string resourcePath = string `/2/team/members/get_info`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/members/list(members_list_body_1 payload, map<string|string[]> headers = {}) returns inline_response_200_61|error {
        string resourcePath = string `/2/team/members/list`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/members/list/'continue(list_continue_body_4 payload, map<string|string[]> headers = {}) returns inline_response_200_61|error {
        string resourcePath = string `/2/team/members/list/continue`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/members/move_former_member_files(members_move_former_member_files_body payload, map<string|string[]> headers = {}) returns inline_response_200_34|error {
        string resourcePath = string `/2/team/members/move_former_member_files`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/members/move_former_member_files/job_status/'check(job_status_check_body payload, map<string|string[]> headers = {}) returns inline_response_200_34|error {
        string resourcePath = string `/2/team/members/move_former_member_files/job_status/check`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/members/recover(members_recover_body payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/2/team/members/recover`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/members/remove(members_remove_body_1 payload, map<string|string[]> headers = {}) returns inline_response_200_34|error {
        string resourcePath = string `/2/team/members/remove`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/members/remove/job_status/get(job_status_get_body_2 payload, map<string|string[]> headers = {}) returns inline_response_200_34|error {
        string resourcePath = string `/2/team/members/remove/job_status/get`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/members/secondary_emails/add(secondary_emails_add_body payload, map<string|string[]> headers = {}) returns inline_response_200_62|error {
        string resourcePath = string `/2/team/members/secondary_emails/add`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/members/secondary_emails/delete(secondary_emails_delete_body payload, map<string|string[]> headers = {}) returns inline_response_200_63|error {
        string resourcePath = string `/2/team/members/secondary_emails/delete`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/members/secondary_emails/resend_verification_emails(secondary_emails_resend_verification_emails_body payload, map<string|string[]> headers = {}) returns inline_response_200_64|error {
        string resourcePath = string `/2/team/members/secondary_emails/resend_verification_emails`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/members/send_welcome_email(members_send_welcome_email_body payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/2/team/members/send_welcome_email`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/members/set_admin_permissions(members_set_admin_permissions_body payload, map<string|string[]> headers = {}) returns inline_response_200_65|error {
        string resourcePath = string `/2/team/members/set_admin_permissions`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/members/set_profile(members_set_profile_body payload, map<string|string[]> headers = {}) returns inline_response_200_59|error {
        string resourcePath = string `/2/team/members/set_profile`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/members/set_profile_photo(members_set_profile_photo_body payload, map<string|string[]> headers = {}) returns inline_response_200_59|error {
        string resourcePath = string `/2/team/members/set_profile_photo`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/members/suspend(members_suspend_body payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/2/team/members/suspend`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/members/unsuspend(members_unsuspend_body payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/2/team/members/unsuspend`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/namespaces/list(namespaces_list_body payload, map<string|string[]> headers = {}) returns inline_response_200_66|error {
        string resourcePath = string `/2/team/namespaces/list`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/namespaces/list/'continue(list_continue_body_5 payload, map<string|string[]> headers = {}) returns inline_response_200_66|error {
        string resourcePath = string `/2/team/namespaces/list/continue`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/reports/get_activity(string payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/2/team/reports/get_activity`;
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/reports/get_devices(string payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/2/team/reports/get_devices`;
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/reports/get_membership(string payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/2/team/reports/get_membership`;
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/reports/get_storage(string payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/2/team/reports/get_storage`;
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/team_folder/activate(team_folder_activate_body payload, map<string|string[]> headers = {}) returns inline_response_200_67|error {
        string resourcePath = string `/2/team/team_folder/activate`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/team_folder/archive(team_folder_archive_body payload, map<string|string[]> headers = {}) returns inline_response_200_68|error {
        string resourcePath = string `/2/team/team_folder/archive`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/team_folder/archive/'check(archive_check_body payload, map<string|string[]> headers = {}) returns inline_response_200_68|error {
        string resourcePath = string `/2/team/team_folder/archive/check`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/team_folder/create(team_folder_create_body payload, map<string|string[]> headers = {}) returns inline_response_200_67|error {
        string resourcePath = string `/2/team/team_folder/create`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/team_folder/get_info(team_folder_get_info_body payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/2/team/team_folder/get_info`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/team_folder/list(team_folder_list_body payload, map<string|string[]> headers = {}) returns inline_response_200_69|error {
        string resourcePath = string `/2/team/team_folder/list`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/team_folder/list/'continue(list_continue_body_6 payload, map<string|string[]> headers = {}) returns inline_response_200_69|error {
        string resourcePath = string `/2/team/team_folder/list/continue`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/team_folder/permanently_delete(team_folder_permanently_delete_body payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/2/team/team_folder/permanently_delete`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/team_folder/rename(team_folder_rename_body payload, map<string|string[]> headers = {}) returns inline_response_200_67|error {
        string resourcePath = string `/2/team/team_folder/rename`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/team_folder/update_sync_settings(team_folder_update_sync_settings_body payload, map<string|string[]> headers = {}) returns inline_response_200_67|error {
        string resourcePath = string `/2/team/team_folder/update_sync_settings`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/token/get_authenticated_admin(map<string|string[]> headers = {}) returns inline_response_200_72|error {
        string resourcePath = string `/2/team/token/get_authenticated_admin`;
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team_log/get_events(team_log_get_events_body payload, map<string|string[]> headers = {}) returns inline_response_200_73|error {
        string resourcePath = string `/2/team_log/get_events`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team_log/get_events/'continue(get_events_continue_body payload, map<string|string[]> headers = {}) returns inline_response_200_73|error {
        string resourcePath = string `/2/team_log/get_events/continue`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/users/features/get_values(features_get_values_body_1 payload, FeaturesGetValues1Headers headers = {}) returns inline_response_200_74|error {
        string resourcePath = string `/2/users/features/get_values`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/users/get_account(users_get_account_body payload, GetAccountHeaders headers = {}) returns inline_response_200_75|error {
        string resourcePath = string `/2/users/get_account`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/users/get_account_batch(users_get_account_batch_body payload, GetAccountBatchHeaders headers = {}) returns inline_response_200_76[]|error {
        string resourcePath = string `/2/users/get_account_batch`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/users/get_current_account(GetCurrentAccountHeaders headers = {}) returns inline_response_200_77|error {
        string resourcePath = string `/2/users/get_current_account`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/users/get_space_usage(GetSpaceUsageHeaders headers = {}) returns inline_response_200_78|error {
        string resourcePath = string `/2/users/get_space_usage`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }
}
