// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2024, WSO2 LLC. (http://www.wso2.com).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/http;

# The powerful, yet simple, Dropbox API allows you to manage and control content and team settings programmatically and extend Dropbox capabilities in new and powerful ways. This is a collection that includes requests to all endpoints in the Dropbox API. 
# 
# The Dropbox API is divided in two groups of endpoints: User Endpoints and Business Endpoints. Operations that would most likely be executed by a user, such as file operations, are in the User Endpoints folder. Operations that would most likely be executed by a team administrator, such as adding users to groups, live in the Business Endpoints folder. 
# 
# If you are new to Dropbox Business and Team Administration, please have a look at the [Dropobox Admin Guide](https://help.dropbox.com/guide/admin/how-to-get-started#dropbox-admin-guide). 
# 
# If you want more information on how to use our API please refer to our [Developer Portal](https://www.dropbox.com/developers). 
# 
# # What's in the collection?
# 
# The endpoints are organized in the following folders:
# * account
# * auth
# * check
# * contacts
# * file_properties
# * file_requests
# * files
# * sharing
# * team
# * team_log
# * users
# 
# # Authorization
# 
# ## OAuth 2.0 for API Access
# Dropbox uses OAuth 2.0, an open specification, to authorize access to data. To get an OAuth token from Dropbox to enable Postman to access your Dropbox account via the API you’ll need to create a new app on the DBX Platform.
# 
# ## Creating an App on the DBX Platform
# Navigate to https://www.dropbox.com/developers/apps and select “Create app” 
# 1. Choose an API  
# 2. Choose the type of access you need 
# 3. Give your app a name  
# 4. Choose the Dropbox account that will own your app  
# 
# For reference, please use the [Dropbox OAuth guide](https://www.dropbox.com/lp/developers/reference/oauth-guide) 
# 
# ## Generating an Access Token
# Once you select “Create app” a page will load that displays information about your newly created app. To generate an access token scroll down to “OAuth 2” and click “Generate” beneath “Generated access token.” The token will display as a long string of characters. Copy this token for use with the Postman Collection.
# 
# ## Adding an Access Token to the requests
# In the Postman client, click on the three dots to the right of the collection name to "View more actions."
# 
# ![Screenshot of adding access token](https://www.dropbox.com/s/sfebu9ai76cbq39/Screen%20Shot%202020-10-28%20at%2012.50.56%20AM.png?raw=1)
# 
# Then, click "Edit."
# 
# Click on the "Variables" tab and, in the row for the `access_token` variable, paste your access token in the `CURRENT VALUE` column. The default value is `your-access-token-here`.
# 
# ![Screenshot of adding access token](https://www.dropbox.com/s/ahnbxwe6oscjues/Screen%20Shot%202020-10-28%20at%2012.51.13%20AM.png?raw=1)
# 
# For information on sessions and variables in Postman see the blog post at https://blog.postman.com/sessions-faq/.
# 
# # Notes
# * Dropbox also has a Postman Collection in the API Network to help administrators with team management workflows. It is called [Dropbox Team Admin Workflows](). 
public isolated client class Client {
    final http:Client clientEp;
    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string serviceUrl = "https://api.dropboxapi.com") returns error? {
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, timeout: config.timeout, forwarded: config.forwarded, poolConfig: config.poolConfig, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, validation: config.validation};
        do {
            if config.http1Settings is ClientHttp1Settings {
                ClientHttp1Settings settings = check config.http1Settings.ensureType(ClientHttp1Settings);
                httpClientConfig.http1Settings = {...settings};
            }
            if config.http2Settings is http:ClientHttp2Settings {
                httpClientConfig.http2Settings = check config.http2Settings.ensureType(http:ClientHttp2Settings);
            }
            if config.cache is http:CacheConfig {
                httpClientConfig.cache = check config.cache.ensureType(http:CacheConfig);
            }
            if config.responseLimits is http:ResponseLimitConfigs {
                httpClientConfig.responseLimits = check config.responseLimits.ensureType(http:ResponseLimitConfigs);
            }
            if config.secureSocket is http:ClientSecureSocket {
                httpClientConfig.secureSocket = check config.secureSocket.ensureType(http:ClientSecureSocket);
            }
            if config.proxy is http:ProxyConfig {
                httpClientConfig.proxy = check config.proxy.ensureType(http:ProxyConfig);
            }
        }
        http:Client httpEp = check new (serviceUrl, httpClientConfig);
        self.clientEp = httpEp;
        return;
    }

    resource isolated function post '2/'check/app(record {} payload, Post2CheckAppHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/check/app`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/'check/user(record {} payload, Post2CheckUserHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/check/user`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/account/set_profile_photo(record {} payload, Post2AccountSet_profile_photoHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/account/set_profile_photo`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/auth/token/from_oauth1(record {} payload, Post2AuthTokenFrom_oauth1Headers headers = {}) returns record {}|error {
        string resourcePath = string `/2/auth/token/from_oauth1`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/auth/token/revoke(record {} payload, Post2AuthTokenRevokeHeaders headers = {}) returns json|error {
        string resourcePath = string `/2/auth/token/revoke`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/contacts/delete_manual_contacts(record {} payload, Post2ContactsDelete_manual_contactsHeaders headers = {}) returns json|error {
        string resourcePath = string `/2/contacts/delete_manual_contacts`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/contacts/delete_manual_contacts_batch(record {} payload, Post2ContactsDelete_manual_contacts_batchHeaders headers = {}) returns json|error {
        string resourcePath = string `/2/contacts/delete_manual_contacts_batch`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/file_properties/properties/add(record {} payload, Post2File_propertiesPropertiesAddHeaders headers = {}) returns json|error {
        string resourcePath = string `/2/file_properties/properties/add`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/file_properties/properties/overwrite(record {} payload, Post2File_propertiesPropertiesOverwriteHeaders headers = {}) returns json|error {
        string resourcePath = string `/2/file_properties/properties/overwrite`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/file_properties/properties/remove(record {} payload, Post2File_propertiesPropertiesRemoveHeaders headers = {}) returns json|error {
        string resourcePath = string `/2/file_properties/properties/remove`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/file_properties/properties/search(record {} payload, Post2File_propertiesPropertiesSearchHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/file_properties/properties/search`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/file_properties/properties/search/'continue(record {} payload, Post2File_propertiesPropertiesSearchContinueHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/file_properties/properties/search/continue`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/file_properties/properties/update(record {} payload, Post2File_propertiesPropertiesUpdateHeaders headers = {}) returns json|error {
        string resourcePath = string `/2/file_properties/properties/update`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/file_properties/templates/add_for_team(record {} payload, Post2File_propertiesTemplatesAdd_for_teamHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/file_properties/templates/add_for_team`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/file_properties/templates/add_for_user(record {} payload, Post2File_propertiesTemplatesAdd_for_userHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/file_properties/templates/add_for_user`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/file_properties/templates/get_for_team(record {} payload, Post2File_propertiesTemplatesGet_for_teamHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/file_properties/templates/get_for_team`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/file_properties/templates/get_for_user(record {} payload, Post2File_propertiesTemplatesGet_for_userHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/file_properties/templates/get_for_user`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/file_properties/templates/list_for_team(record {} payload, map<string|string[]> headers = {}) returns record {}|error {
        string resourcePath = string `/2/file_properties/templates/list_for_team`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/file_properties/templates/list_for_user(record {} payload, Post2File_propertiesTemplatesList_for_userHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/file_properties/templates/list_for_user`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/file_properties/templates/remove_for_team(record {} payload, Post2File_propertiesTemplatesRemove_for_teamHeaders headers = {}) returns json|error {
        string resourcePath = string `/2/file_properties/templates/remove_for_team`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/file_properties/templates/remove_for_user(record {} payload, Post2File_propertiesTemplatesRemove_for_userHeaders headers = {}) returns json|error {
        string resourcePath = string `/2/file_properties/templates/remove_for_user`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/file_properties/templates/update_for_team(record {} payload, Post2File_propertiesTemplatesUpdate_for_teamHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/file_properties/templates/update_for_team`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/file_properties/templates/update_for_user(record {} payload, Post2File_propertiesTemplatesUpdate_for_userHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/file_properties/templates/update_for_user`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/file_requests/count(record {} payload, Post2File_requestsCountHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/file_requests/count`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/file_requests/create(record {} payload, Post2File_requestsCreateHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/file_requests/create`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/file_requests/delete(record {} payload, Post2File_requestsDeleteHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/file_requests/delete`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/file_requests/delete_all_closed(record {} payload, Post2File_requestsDelete_all_closedHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/file_requests/delete_all_closed`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/file_requests/get(record {} payload, Post2File_requestsGetHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/file_requests/get`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/file_requests/list/'continue(record {} payload, Post2File_requestsListContinueHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/file_requests/list/continue`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/file_requests/list_v2(record {} payload, Post2File_requestsList_v2Headers headers = {}) returns record {}|error {
        string resourcePath = string `/2/file_requests/list_v2`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/file_requests/update(record {} payload, Post2File_requestsUpdateHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/file_requests/update`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/copy_batch/check_v2(record {} payload, Post2FilesCopy_batchCheck_v2Headers headers = {}) returns record {}|error {
        string resourcePath = string `/2/files/copy_batch/check_v2`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/copy_batch_v2(record {} payload, Post2FilesCopy_batch_v2Headers headers = {}) returns record {}|error {
        string resourcePath = string `/2/files/copy_batch_v2`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/copy_reference/get(record {} payload, Post2FilesCopy_referenceGetHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/files/copy_reference/get`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/copy_reference/save(record {} payload, Post2FilesCopy_referenceSaveHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/files/copy_reference/save`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/copy_v2(record {} payload, Post2FilesCopy_v2Headers headers = {}) returns record {}|error {
        string resourcePath = string `/2/files/copy_v2`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/create_folder_batch(record {} payload, Post2FilesCreate_folder_batchHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/files/create_folder_batch`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/create_folder_batch/'check(record {} payload, Post2FilesCreate_folder_batchCheckHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/files/create_folder_batch/check`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/create_folder_v2(record {} payload, Post2FilesCreate_folder_v2Headers headers = {}) returns record {}|error {
        string resourcePath = string `/2/files/create_folder_v2`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/delete_batch(record {} payload, Post2FilesDelete_batchHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/files/delete_batch`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/delete_batch/'check(record {} payload, Post2FilesDelete_batchCheckHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/files/delete_batch/check`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/delete_v2(record {} payload, Post2FilesDelete_v2Headers headers = {}) returns record {}|error {
        string resourcePath = string `/2/files/delete_v2`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/download(record {} payload, Post2FilesDownloadHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/files/download`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/download_zip(record {} payload, Post2FilesDownload_zipHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/files/download_zip`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/export(record {} payload, Post2FilesExportHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/files/export`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/get_file_lock_batch(record {} payload, Post2FilesGet_file_lock_batchHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/files/get_file_lock_batch`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/get_metadata(record {} payload, Post2FilesGet_metadataHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/files/get_metadata`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/get_preview(record {} payload, Post2FilesGet_previewHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/files/get_preview`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/get_temporary_link(record {} payload, Post2FilesGet_temporary_linkHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/files/get_temporary_link`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/get_temporary_upload_link(record {} payload, Post2FilesGet_temporary_upload_linkHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/files/get_temporary_upload_link`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/get_thumbnail_batch(record {} payload, Post2FilesGet_thumbnail_batchHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/files/get_thumbnail_batch`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/get_thumbnail_v2(record {} payload, Post2FilesGet_thumbnail_v2Headers headers = {}) returns record {}|error {
        string resourcePath = string `/2/files/get_thumbnail_v2`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/list_folder(record {} payload, Post2FilesList_folderHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/files/list_folder`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/list_folder/'continue(record {} payload, Post2FilesList_folderContinueHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/files/list_folder/continue`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/list_folder/get_latest_cursor(record {} payload, Post2FilesList_folderGet_latest_cursorHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/files/list_folder/get_latest_cursor`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/list_folder/longpoll(record {} payload, Post2FilesList_folderLongpollHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/files/list_folder/longpoll`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/list_revisions(record {} payload, Post2FilesList_revisionsHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/files/list_revisions`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/lock_file_batch(record {} payload, Post2FilesLock_file_batchHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/files/lock_file_batch`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/move_batch/check_v2(record {} payload, Post2FilesMove_batchCheck_v2Headers headers = {}) returns record {}|error {
        string resourcePath = string `/2/files/move_batch/check_v2`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/move_batch_v2(record {} payload, Post2FilesMove_batch_v2Headers headers = {}) returns record {}|error {
        string resourcePath = string `/2/files/move_batch_v2`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/move_v2(record {} payload, Post2FilesMove_v2Headers headers = {}) returns record {}|error {
        string resourcePath = string `/2/files/move_v2`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/permanently_delete(record {} payload, Post2FilesPermanently_deleteHeaders headers = {}) returns json|error {
        string resourcePath = string `/2/files/permanently_delete`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/restore(record {} payload, Post2FilesRestoreHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/files/restore`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/save_url(record {} payload, Post2FilesSave_urlHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/files/save_url`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/save_url/check_job_status(record {} payload, Post2FilesSave_urlCheck_job_statusHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/files/save_url/check_job_status`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/search/continue_v2(record {} payload, Post2FilesSearchContinue_v2Headers headers = {}) returns record {}|error {
        string resourcePath = string `/2/files/search/continue_v2`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/search_v2(record {} payload, Post2FilesSearch_v2Headers headers = {}) returns record {}|error {
        string resourcePath = string `/2/files/search_v2`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/unlock_file_batch(record {} payload, Post2FilesUnlock_file_batchHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/files/unlock_file_batch`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/upload(record {} payload, Post2FilesUploadHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/files/upload`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/upload_session/'start(record {} payload, Post2FilesUpload_sessionStartHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/files/upload_session/start`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/upload_session/append_v2(record {} payload, Post2FilesUpload_sessionAppend_v2Headers headers = {}) returns json|error {
        string resourcePath = string `/2/files/upload_session/append_v2`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/upload_session/finish(record {} payload, Post2FilesUpload_sessionFinishHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/files/upload_session/finish`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/upload_session/finish_batch(record {} payload, Post2FilesUpload_sessionFinish_batchHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/files/upload_session/finish_batch`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/files/upload_session/finish_batch/'check(record {} payload, Post2FilesUpload_sessionFinish_batchCheckHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/files/upload_session/finish_batch/check`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/add_file_member(record {} payload, Post2SharingAdd_file_memberHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/sharing/add_file_member`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/add_folder_member(record {} payload, Post2SharingAdd_folder_memberHeaders headers = {}) returns json|error {
        string resourcePath = string `/2/sharing/add_folder_member`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/check_job_status(record {} payload, Post2SharingCheck_job_statusHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/sharing/check_job_status`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/check_remove_member_job_status(record {} payload, Post2SharingCheck_remove_member_job_statusHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/sharing/check_remove_member_job_status`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/check_share_job_status(record {} payload, Post2SharingCheck_share_job_statusHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/sharing/check_share_job_status`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/get_file_metadata(record {} payload, Post2SharingGet_file_metadataHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/sharing/get_file_metadata`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/get_file_metadata/batch(record {} payload, Post2SharingGet_file_metadataBatchHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/sharing/get_file_metadata/batch`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/get_folder_metadata(record {} payload, Post2SharingGet_folder_metadataHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/sharing/get_folder_metadata`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/get_shared_link_file(record {} payload, Post2SharingGet_shared_link_fileHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/sharing/get_shared_link_file`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/get_shared_link_metadata(record {} payload, Post2SharingGet_shared_link_metadataHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/sharing/get_shared_link_metadata`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/list_file_members(record {} payload, Post2SharingList_file_membersHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/sharing/list_file_members`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/list_file_members/'continue(record {} payload, Post2SharingList_file_membersContinueHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/sharing/list_file_members/continue`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/list_file_members/batch(record {} payload, Post2SharingList_file_membersBatchHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/sharing/list_file_members/batch`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/list_folder_members/'continue(record {} payload, Post2SharingList_folder_membersContinueHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/sharing/list_folder_members/continue`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/list_folders(record {} payload, Post2SharingList_foldersHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/sharing/list_folders`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/list_folders/'continue(record {} payload, Post2SharingList_foldersContinueHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/sharing/list_folders/continue`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/list_mountable_folders(record {} payload, Post2SharingList_mountable_foldersHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/sharing/list_mountable_folders`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/list_mountable_folders/'continue(record {} payload, Post2SharingList_mountable_foldersContinueHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/sharing/list_mountable_folders/continue`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/list_received_files(record {} payload, Post2SharingList_received_filesHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/sharing/list_received_files`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/list_received_files/'continue(record {} payload, Post2SharingList_received_filesContinueHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/sharing/list_received_files/continue`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/list_shared_links(record {} payload, Post2SharingList_shared_linksHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/sharing/list_shared_links`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/modify_shared_link_settings(record {} payload, Post2SharingModify_shared_link_settingsHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/sharing/modify_shared_link_settings`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/mount_folder(record {} payload, Post2SharingMount_folderHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/sharing/mount_folder`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/relinquish_file_membership(record {} payload, Post2SharingRelinquish_file_membershipHeaders headers = {}) returns json|error {
        string resourcePath = string `/2/sharing/relinquish_file_membership`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/relinquish_folder_membership(record {} payload, Post2SharingRelinquish_folder_membershipHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/sharing/relinquish_folder_membership`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/remove_file_member_2(record {} payload, Post2SharingRemove_file_member_2Headers headers = {}) returns record {}|error {
        string resourcePath = string `/2/sharing/remove_file_member_2`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/remove_folder_member(record {} payload, Post2SharingRemove_folder_memberHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/sharing/remove_folder_member`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/revoke_shared_link(record {} payload, Post2SharingRevoke_shared_linkHeaders headers = {}) returns json|error {
        string resourcePath = string `/2/sharing/revoke_shared_link`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/set_access_inheritance(record {} payload, Post2SharingSet_access_inheritanceHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/sharing/set_access_inheritance`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/share_folder(record {} payload, Post2SharingShare_folderHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/sharing/share_folder`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/transfer_folder(record {} payload, Post2SharingTransfer_folderHeaders headers = {}) returns json|error {
        string resourcePath = string `/2/sharing/transfer_folder`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/unmount_folder(record {} payload, Post2SharingUnmount_folderHeaders headers = {}) returns json|error {
        string resourcePath = string `/2/sharing/unmount_folder`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/unshare_file(record {} payload, Post2SharingUnshare_fileHeaders headers = {}) returns json|error {
        string resourcePath = string `/2/sharing/unshare_file`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/unshare_folder(record {} payload, Post2SharingUnshare_folderHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/sharing/unshare_folder`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/update_file_member(record {} payload, Post2SharingUpdate_file_memberHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/sharing/update_file_member`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/update_folder_member(record {} payload, Post2SharingUpdate_folder_memberHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/sharing/update_folder_member`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/sharing/update_folder_policy(record {} payload, Post2SharingUpdate_folder_policyHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/sharing/update_folder_policy`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/devices/list_member_devices(record {} payload, Post2TeamDevicesList_member_devicesHeaders headers = {}) returns json|error {
        string resourcePath = string `/2/team/devices/list_member_devices`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/devices/list_members_devices(record {} payload, Post2TeamDevicesList_members_devicesHeaders headers = {}) returns json|error {
        string resourcePath = string `/2/team/devices/list_members_devices`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/devices/revoke_device_session(record {} payload, Post2TeamDevicesRevoke_device_sessionHeaders headers = {}) returns json|error {
        string resourcePath = string `/2/team/devices/revoke_device_session`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/devices/revoke_device_session_batch(record {} payload, Post2TeamDevicesRevoke_device_session_batchHeaders headers = {}) returns json|error {
        string resourcePath = string `/2/team/devices/revoke_device_session_batch`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/features/get_values(record {} payload, Post2TeamFeaturesGet_valuesHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/features/get_values`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/get_info(record {} payload, map<string|string[]> headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/get_info`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team/groups/create(record {} payload, Post2TeamGroupsCreateHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/groups/create`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/groups/delete(record {} payload, Post2TeamGroupsDeleteHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/groups/delete`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/groups/get_info(record {} payload, Post2TeamGroupsGet_infoHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/groups/get_info`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/groups/job_status/get(record {} payload, Post2TeamGroupsJob_statusGetHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/groups/job_status/get`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/groups/list(record {} payload, Post2TeamGroupsListHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/groups/list`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/groups/list/'continue(record {} payload, Post2TeamGroupsListContinueHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/groups/list/continue`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/groups/members/add(record {} payload, Post2TeamGroupsMembersAddHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/groups/members/add`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/groups/members/list(record {} payload, Post2TeamGroupsMembersListHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/groups/members/list`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/groups/members/list/'continue(record {} payload, Post2TeamGroupsMembersListContinueHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/groups/members/list/continue`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/groups/members/remove(record {} payload, Post2TeamGroupsMembersRemoveHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/groups/members/remove`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/groups/members/set_access_type(record {} payload, Post2TeamGroupsMembersSet_access_typeHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/groups/members/set_access_type`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/groups/update(record {} payload, Post2TeamGroupsUpdateHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/groups/update`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/legal_holds/create_policy(record {} payload, Post2TeamLegal_holdsCreate_policyHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/legal_holds/create_policy`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/legal_holds/get_policy(record {} payload, Post2TeamLegal_holdsGet_policyHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/legal_holds/get_policy`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/legal_holds/list_held_revisions(record {} payload, Post2TeamLegal_holdsList_held_revisionsHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/legal_holds/list_held_revisions`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/legal_holds/list_held_revisions_continue(record {} payload, Post2TeamLegal_holdsList_held_revisions_continueHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/legal_holds/list_held_revisions_continue`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/legal_holds/list_policies(record {} payload, Post2TeamLegal_holdsList_policiesHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/legal_holds/list_policies`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/legal_holds/release_policy(record {} payload, Post2TeamLegal_holdsRelease_policyHeaders headers = {}) returns json|error {
        string resourcePath = string `/2/team/legal_holds/release_policy`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/legal_holds/update_policy(record {} payload, Post2TeamLegal_holdsUpdate_policyHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/legal_holds/update_policy`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/linked_apps/list_member_linked_apps(record {} payload, Post2TeamLinked_appsList_member_linked_appsHeaders headers = {}) returns json|error {
        string resourcePath = string `/2/team/linked_apps/list_member_linked_apps`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/linked_apps/list_members_linked_apps(record {} payload, Post2TeamLinked_appsList_members_linked_appsHeaders headers = {}) returns json|error {
        string resourcePath = string `/2/team/linked_apps/list_members_linked_apps`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/linked_apps/revoke_linked_app(record {} payload, Post2TeamLinked_appsRevoke_linked_appHeaders headers = {}) returns json|error {
        string resourcePath = string `/2/team/linked_apps/revoke_linked_app`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/linked_apps/revoke_linked_app_batch(record {} payload, Post2TeamLinked_appsRevoke_linked_app_batchHeaders headers = {}) returns json|error {
        string resourcePath = string `/2/team/linked_apps/revoke_linked_app_batch`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/member_space_limits/excluded_users/add(record {} payload, Post2TeamMember_space_limitsExcluded_usersAddHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/member_space_limits/excluded_users/add`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/member_space_limits/excluded_users/list(record {} payload, Post2TeamMember_space_limitsExcluded_usersListHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/member_space_limits/excluded_users/list`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/member_space_limits/excluded_users/list/'continue(record {} payload, Post2TeamMember_space_limitsExcluded_usersListContinueHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/member_space_limits/excluded_users/list/continue`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/member_space_limits/excluded_users/remove(record {} payload, Post2TeamMember_space_limitsExcluded_usersRemoveHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/member_space_limits/excluded_users/remove`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/member_space_limits/get_custom_quota(record {} payload, Post2TeamMember_space_limitsGet_custom_quotaHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/member_space_limits/get_custom_quota`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/member_space_limits/remove_custom_quota(record {} payload, Post2TeamMember_space_limitsRemove_custom_quotaHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/member_space_limits/remove_custom_quota`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/member_space_limits/set_custom_quota(record {} payload, Post2TeamMember_space_limitsSet_custom_quotaHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/member_space_limits/set_custom_quota`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/members/add(record {} payload, Post2TeamMembersAddHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/members/add`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/members/add/job_status/get(record {} payload, Post2TeamMembersAddJob_statusGetHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/members/add/job_status/get`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/members/delete_profile_photo(record {} payload, Post2TeamMembersDelete_profile_photoHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/members/delete_profile_photo`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/members/get_info(record {} payload, Post2TeamMembersGet_infoHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/members/get_info`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/members/list(record {} payload, Post2TeamMembersListHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/members/list`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/members/list/'continue(record {} payload, Post2TeamMembersListContinueHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/members/list/continue`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/members/move_former_member_files(record {} payload, Post2TeamMembersMove_former_member_filesHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/members/move_former_member_files`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/members/move_former_member_files/job_status/'check(record {} payload, Post2TeamMembersMove_former_member_filesJob_statusCheckHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/members/move_former_member_files/job_status/check`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/members/recover(record {} payload, Post2TeamMembersRecoverHeaders headers = {}) returns json|error {
        string resourcePath = string `/2/team/members/recover`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/members/remove(record {} payload, Post2TeamMembersRemoveHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/members/remove`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/members/remove/job_status/get(record {} payload, Post2TeamMembersRemoveJob_statusGetHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/members/remove/job_status/get`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/members/secondary_emails/add(record {} payload, Post2TeamMembersSecondary_emailsAddHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/members/secondary_emails/add`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/members/secondary_emails/delete(record {} payload, Post2TeamMembersSecondary_emailsDeleteHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/members/secondary_emails/delete`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/members/secondary_emails/resend_verification_emails(record {} payload, Post2TeamMembersSecondary_emailsResend_verification_emailsHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/members/secondary_emails/resend_verification_emails`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/members/send_welcome_email(record {} payload, Post2TeamMembersSend_welcome_emailHeaders headers = {}) returns json|error {
        string resourcePath = string `/2/team/members/send_welcome_email`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/members/set_admin_permissions(record {} payload, Post2TeamMembersSet_admin_permissionsHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/members/set_admin_permissions`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/members/set_profile(record {} payload, Post2TeamMembersSet_profileHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/members/set_profile`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/members/set_profile_photo(record {} payload, Post2TeamMembersSet_profile_photoHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/members/set_profile_photo`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/members/suspend(record {} payload, Post2TeamMembersSuspendHeaders headers = {}) returns json|error {
        string resourcePath = string `/2/team/members/suspend`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/members/unsuspend(record {} payload, Post2TeamMembersUnsuspendHeaders headers = {}) returns json|error {
        string resourcePath = string `/2/team/members/unsuspend`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/namespaces/list(record {} payload, Post2TeamNamespacesListHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/namespaces/list`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/namespaces/list/'continue(record {} payload, Post2TeamNamespacesListContinueHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/namespaces/list/continue`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/reports/get_activity(record {} payload, Post2TeamReportsGet_activityHeaders headers = {}) returns json|error {
        string resourcePath = string `/2/team/reports/get_activity`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/reports/get_devices(record {} payload, Post2TeamReportsGet_devicesHeaders headers = {}) returns json|error {
        string resourcePath = string `/2/team/reports/get_devices`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/reports/get_membership(record {} payload, Post2TeamReportsGet_membershipHeaders headers = {}) returns json|error {
        string resourcePath = string `/2/team/reports/get_membership`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/reports/get_storage(record {} payload, Post2TeamReportsGet_storageHeaders headers = {}) returns json|error {
        string resourcePath = string `/2/team/reports/get_storage`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/team_folder/activate(record {} payload, Post2TeamTeam_folderActivateHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/team_folder/activate`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/team_folder/archive(record {} payload, Post2TeamTeam_folderArchiveHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/team_folder/archive`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/team_folder/archive/'check(record {} payload, Post2TeamTeam_folderArchiveCheckHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/team_folder/archive/check`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/team_folder/create(record {} payload, Post2TeamTeam_folderCreateHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/team_folder/create`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/team_folder/get_info(record {} payload, Post2TeamTeam_folderGet_infoHeaders headers = {}) returns json|error {
        string resourcePath = string `/2/team/team_folder/get_info`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/team_folder/list(record {} payload, Post2TeamTeam_folderListHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/team_folder/list`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/team_folder/list/'continue(record {} payload, Post2TeamTeam_folderListContinueHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/team_folder/list/continue`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/team_folder/permanently_delete(record {} payload, Post2TeamTeam_folderPermanently_deleteHeaders headers = {}) returns json|error {
        string resourcePath = string `/2/team/team_folder/permanently_delete`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/team_folder/rename(record {} payload, Post2TeamTeam_folderRenameHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/team_folder/rename`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/team_folder/update_sync_settings(record {} payload, Post2TeamTeam_folderUpdate_sync_settingsHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/team_folder/update_sync_settings`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team/token/get_authenticated_admin(record {} payload, map<string|string[]> headers = {}) returns record {}|error {
        string resourcePath = string `/2/team/token/get_authenticated_admin`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/team_log/get_events(record {} payload, Post2Team_logGet_eventsHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team_log/get_events`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/team_log/get_events/'continue(record {} payload, Post2Team_logGet_eventsContinueHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/team_log/get_events/continue`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/users/features/get_values(record {} payload, Post2UsersFeaturesGet_valuesHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/users/features/get_values`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/users/get_account(record {} payload, Post2UsersGet_accountHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/users/get_account`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/users/get_account_batch(record {} payload, Post2UsersGet_account_batchHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/users/get_account_batch`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/users/get_current_account(record {} payload, Post2UsersGet_current_accountHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/users/get_current_account`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post '2/users/get_space_usage(record {} payload, Post2UsersGet_space_usageHeaders headers = {}) returns record {}|error {
        string resourcePath = string `/2/users/get_space_usage`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }
}
